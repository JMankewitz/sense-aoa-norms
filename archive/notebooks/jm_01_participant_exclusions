{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notebook Structure:\n",
    "\n",
    "Clean Data  \n",
    "1) Drop no consent [Link](#no_consent)   \n",
    "2) Drop no sense estimations [Link](#no_estimations)  \n",
    "3) Drop Participants who failed at least one attention check [Link](#attention_check)  \n",
    "4) Drop Participants who never had an attention check, or don't have all the attention checks [Link](#esl)   \n",
    "5) Drop For poor spearmans [Link](#spearmans) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jmankewitz/Projects/envs/sense_aoa_env/lib/python3.7/site-packages/rpy2/robjects/lib/ggplot2.py:73: UserWarning: This was designed againt ggplot2 versions starting with 3.3. but you have 3.2.1\n",
      "  'have %s' % (TARGET_VERSION, ggplot2.__version__))\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "sys.path.append('..')\n",
    "\n",
    "import pandas as pd\n",
    "pd.options.mode.chained_assignment = None\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from nltk.corpus import wordnet as wn\n",
    "from nltk.stem import WordNetLemmatizer \n",
    "import random\n",
    "import imp\n",
    "from modules import data_cleaning\n",
    "\n",
    "%load_ext rpy2.ipython\n",
    "import rpy2.robjects.lib.ggplot2 as ggplot2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "raw_word_sense_text_entry_df = pd.read_csv('../data/word_sense_text_entry_most.csv',dtype=str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>StartDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Status</th>\n",
       "      <th>IPAddress</th>\n",
       "      <th>Progress</th>\n",
       "      <th>Duration (in seconds)</th>\n",
       "      <th>Finished</th>\n",
       "      <th>RecordedDate</th>\n",
       "      <th>ResponseId</th>\n",
       "      <th>RecipientLastName</th>\n",
       "      <th>...</th>\n",
       "      <th>yellow adj_say_2</th>\n",
       "      <th>yellow adj_say_3</th>\n",
       "      <th>yellow adj_say_4</th>\n",
       "      <th>yucky adj_say_1</th>\n",
       "      <th>say_check 1_1.3</th>\n",
       "      <th>say_check 2_1.3</th>\n",
       "      <th>say_check 3_1.3</th>\n",
       "      <th>say_check 4_1.3</th>\n",
       "      <th>say_check 5_1.3</th>\n",
       "      <th>MTurkCode</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>324</th>\n",
       "      <td>2019-05-18 13:51:43</td>\n",
       "      <td>2019-05-18 14:24:05</td>\n",
       "      <td>IP Address</td>\n",
       "      <td>73.106.79.24</td>\n",
       "      <td>100</td>\n",
       "      <td>1941</td>\n",
       "      <td>True</td>\n",
       "      <td>2019-05-18 14:24:06</td>\n",
       "      <td>R_1oHj1kI3ZOVcTBR</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1910711028</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 6801 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               StartDate              EndDate      Status     IPAddress  \\\n",
       "324  2019-05-18 13:51:43  2019-05-18 14:24:05  IP Address  73.106.79.24   \n",
       "\n",
       "    Progress Duration (in seconds) Finished         RecordedDate  \\\n",
       "324      100                  1941     True  2019-05-18 14:24:06   \n",
       "\n",
       "            ResponseId RecipientLastName  ... yellow adj_say_2  \\\n",
       "324  R_1oHj1kI3ZOVcTBR               NaN  ...              NaN   \n",
       "\n",
       "    yellow adj_say_3 yellow adj_say_4 yucky adj_say_1 say_check 1_1.3  \\\n",
       "324              NaN              NaN             NaN             NaN   \n",
       "\n",
       "    say_check 2_1.3 say_check 3_1.3 say_check 4_1.3 say_check 5_1.3  \\\n",
       "324             NaN             NaN             NaN             NaN   \n",
       "\n",
       "      MTurkCode  \n",
       "324  1910711028  \n",
       "\n",
       "[1 rows x 6801 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_word_sense_text_entry_df.sample(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_dict = raw_word_sense_text_entry_df.loc[0].to_dict()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='no_consent'></a>\n",
    "Drop No Consent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2435 participants consented\n"
     ]
    }
   ],
   "source": [
    "word_sense_text_entry_df = raw_word_sense_text_entry_df[raw_word_sense_text_entry_df['Q3']=='I consent to participate in this study.']\n",
    "\n",
    "print(len(word_sense_text_entry_df), 'participants consented')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.24580090126997134"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(len(raw_word_sense_text_entry_df[raw_word_sense_text_entry_df['Q3']!='I consent to participate in this study.'])-2)/(len(raw_word_sense_text_entry_df)-2)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='no_estimations'></a>\n",
    "Drop no estimations (maybe participants dropped the task?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimations for 2225 participants\n"
     ]
    }
   ],
   "source": [
    "mturk_tag_counts = word_sense_text_entry_df[word_sense_text_entry_df.columns[24:]][2:].set_index('MTurkCode').count(axis='columns').reset_index()\n",
    "drop_mturk = mturk_tag_counts[mturk_tag_counts[0]<=0].MTurkCode\n",
    "word_sense_text_entry_df = word_sense_text_entry_df[~word_sense_text_entry_df['MTurkCode'].isin(drop_mturk)]\n",
    "print('Estimations for', len(word_sense_text_entry_df), 'participants')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reindex and assign Participant IDs for analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "word_sense_text_entry_df.loc[:,'participant_id'] = np.arange(1,len(word_sense_text_entry_df)+1)\n",
    "word_sense_text_entry_df = word_sense_text_entry_df.set_index('participant_id')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reorganize Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>question_group</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>say</td>\n",
       "      <td>86974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>understand</td>\n",
       "      <td>57136</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  question_group      0\n",
       "0            say  86974\n",
       "1     understand  57136"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imp.reload(data_cleaning)\n",
    "all_sense_estimation_df = data_cleaning.transformRawEstimations(word_sense_text_entry_df)\n",
    "\n",
    "all_sense_estimation_df.loc[:,'question_group'] = np.where(all_sense_estimation_df['sense_question'].str.contains('say'), 'say', 'understand')\n",
    "all_sense_estimation_df.loc[all_sense_estimation_df.question_type =='attention_check', 'question_group'] = 'attention'\n",
    "all_sense_estimation_df[all_sense_estimation_df['question_type']=='sense_question'].groupby(by='question_group').size().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(word_sense_text_entry_df.index) == set(all_sense_estimation_df.participant_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>participant_id</th>\n",
       "      <th>sense_question</th>\n",
       "      <th>aoa_estimation</th>\n",
       "      <th>question_type</th>\n",
       "      <th>question_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>177021</th>\n",
       "      <td>2168</td>\n",
       "      <td>blue adj_understand_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148833</th>\n",
       "      <td>1707</td>\n",
       "      <td>shoulder n_say_4</td>\n",
       "      <td>6.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>say</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168309</th>\n",
       "      <td>1959</td>\n",
       "      <td>think v_say_6</td>\n",
       "      <td>12.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>say</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137764</th>\n",
       "      <td>1565</td>\n",
       "      <td>grandma calibration_understand_1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>understand</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125022</th>\n",
       "      <td>1403</td>\n",
       "      <td>chips v_understand_1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       participant_id                    sense_question  aoa_estimation  \\\n",
       "177021           2168             blue adj_understand_1             3.0   \n",
       "148833           1707                  shoulder n_say_4             6.0   \n",
       "168309           1959                     think v_say_6            12.0   \n",
       "137764           1565  grandma calibration_understand_1             6.0   \n",
       "125022           1403              chips v_understand_1             6.0   \n",
       "\n",
       "         question_type question_group  \n",
       "177021  sense_question     understand  \n",
       "148833  sense_question            say  \n",
       "168309  sense_question            say  \n",
       "137764     calibration     understand  \n",
       "125022  sense_question     understand  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_sense_estimation_df.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Drop for failing more than one attention check\n",
    "<a id='attention_check'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "attention check questions:\n",
      "['say_check 1_1.3', 'understand_check 4_1.1', 'say_check 1_1.1', 'say_check 4_1.1', 'say_check 4_1.3', 'say_check 3_1.1', 'say_check 3_1.2', 'understand_check 2_1.1', 'say_check 2_1', 'understand_check 1_1.1', 'understand_check 2_1', 'say_check 2_1.1', 'say_check 1_1', 'say_check 2_1.3', 'say_check 3_1', 'say_check 4_1', 'say_check 4_1.2', 'say_check 3_1.3', 'say_check 2_1.2', 'say_check 1_1.2', 'understand_check 3_1', 'understand_check 3_1.1', 'understand_check 1_1', 'understand_check 4_1']\n",
      "\n",
      "attention check answers:\n",
      "['5', '10', '5', '10', '10', '3', '3', '9', '9', '5', '9', '9', '5', '9', '3', '10', '10', '3', '9', '5', '3', '3', '5', '10']\n",
      "\n",
      "num attention checks:  24\n"
     ]
    }
   ],
   "source": [
    "attention_checks = list(set(all_sense_estimation_df[all_sense_estimation_df['question_type']=='attention_check'].sense_question))\n",
    "calibrations = list(set(all_sense_estimation_df[all_sense_estimation_df['question_type']=='calibration'].sense_question))\n",
    "\n",
    "print('attention check questions:')\n",
    "print(attention_checks)\n",
    "print('\\nattention check answers:')\n",
    "print([(question_dict[check].split(\" \")[-1].replace('\"', '')) for check in attention_checks])\n",
    "\n",
    "print('\\nnum attention checks: ', len(attention_checks))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#failing all 4\n",
    "imp.reload(data_cleaning)\n",
    "skipped_check, failed_check = data_cleaning.getFailedAttentionChecks(all_sense_estimation_df, question_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "clean_sense_survey = all_sense_estimation_df[~all_sense_estimation_df['participant_id'].isin(failed_check+skipped_check)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "186 participants skipped or didn't recive at least 4 attention checks\n",
      "204 participants failed at least 1 attention check\n",
      "1836 remaining participants\n"
     ]
    }
   ],
   "source": [
    "print(len(skipped_check), \"participants skipped or didn't recive at least 4 attention checks\")\n",
    "print(len(failed_check), \"participants failed at least 1 attention check\")\n",
    "print(len(set(clean_sense_survey.participant_id)), \"remaining participants\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#allowed to fail/skip one\n",
    "imp.reload(data_cleaning)\n",
    "skipped_one_check, failed_one_check = data_cleaning.getFailedAttentionChecks(all_sense_estimation_df, question_dict,num_to_pass=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "clean_one_sense_survey = all_sense_estimation_df[~all_sense_estimation_df['participant_id'].isin(failed_one_check+skipped_one_check)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "166 participants skipped or didn't recive at least 3 attention checks\n",
      "61 participants failed more than one attention check\n",
      "1999 remaining participants\n"
     ]
    }
   ],
   "source": [
    "print(len(skipped_one_check), \"participants skipped or didn't recive at least 3 attention checks\")\n",
    "print(len(failed_one_check), \"participants failed more than one attention check\")\n",
    "print(len(set(clean_one_sense_survey.participant_id)), \"remaining participants\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pick which to drop - drop for failing at least 2\n",
    "clean_sense_survey = clean_one_sense_survey"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Drop non english first language\n",
    "<a id='esl'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "56 esl participants\n",
      "1943 remaining participants\n"
     ]
    }
   ],
   "source": [
    "participant_metrics_df = word_sense_text_entry_df[['age','Duration (in seconds)', 'parent','edu','eng','Finished']].reset_index()\n",
    "\n",
    "eng_first_lang = participant_metrics_df[participant_metrics_df['eng']=='Yes'].participant_id\n",
    "print(len(set(clean_sense_survey[~clean_sense_survey['participant_id'].isin(eng_first_lang)].participant_id)), \"esl participants\")\n",
    "\n",
    "clean_sense_survey = clean_sense_survey[clean_sense_survey['participant_id'].isin(eng_first_lang)]\n",
    "print(len(set(clean_sense_survey.participant_id)), \"remaining participants\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>participant_id</th>\n",
       "      <th>sense_question</th>\n",
       "      <th>aoa_estimation</th>\n",
       "      <th>question_type</th>\n",
       "      <th>question_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>129659</th>\n",
       "      <td>1461</td>\n",
       "      <td>mailman n_say_1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>say</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158689</th>\n",
       "      <td>1835</td>\n",
       "      <td>salt v_understand_2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164769</th>\n",
       "      <td>1914</td>\n",
       "      <td>fine adj_understand_2</td>\n",
       "      <td>13.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       participant_id         sense_question  aoa_estimation   question_type  \\\n",
       "129659           1461        mailman n_say_1             6.0  sense_question   \n",
       "158689           1835    salt v_understand_2             3.0  sense_question   \n",
       "164769           1914  fine adj_understand_2            13.0  sense_question   \n",
       "\n",
       "       question_group  \n",
       "129659            say  \n",
       "158689     understand  \n",
       "164769     understand  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clean_sense_survey.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['participant_id', 'sense_question', 'aoa_estimation', 'question_type',\n",
      "       'question_group'],\n",
      "      dtype='object')\n",
      "Index(['aoa_estimation'], dtype='object')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>participant_id</th>\n",
       "      <th>age</th>\n",
       "      <th>Duration (in seconds)</th>\n",
       "      <th>parent</th>\n",
       "      <th>edu</th>\n",
       "      <th>eng</th>\n",
       "      <th>Finished</th>\n",
       "      <th>num_calibration</th>\n",
       "      <th>mean_calibration</th>\n",
       "      <th>calibration_varience</th>\n",
       "      <th>num_senses</th>\n",
       "      <th>mean_sense_estimation</th>\n",
       "      <th>sense_estimation_varience</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>204</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4-year college degree</td>\n",
       "      <td>Yes</td>\n",
       "      <td>True</td>\n",
       "      <td>12</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>6.090909</td>\n",
       "      <td>100</td>\n",
       "      <td>8.76</td>\n",
       "      <td>3.840808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>29</td>\n",
       "      <td>347</td>\n",
       "      <td>No</td>\n",
       "      <td>Some college</td>\n",
       "      <td>Yes</td>\n",
       "      <td>True</td>\n",
       "      <td>12</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>7.727273</td>\n",
       "      <td>100</td>\n",
       "      <td>6.18</td>\n",
       "      <td>6.229899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>33</td>\n",
       "      <td>299</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4-year college degree</td>\n",
       "      <td>Yes</td>\n",
       "      <td>True</td>\n",
       "      <td>12</td>\n",
       "      <td>8.833333</td>\n",
       "      <td>5.606061</td>\n",
       "      <td>100</td>\n",
       "      <td>9.49</td>\n",
       "      <td>1.464545</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   participant_id age Duration (in seconds) parent                    edu  \\\n",
       "0               1  25                   204    Yes  4-year college degree   \n",
       "1               2  29                   347     No           Some college   \n",
       "2               3  33                   299    Yes  4-year college degree   \n",
       "\n",
       "   eng Finished  num_calibration  mean_calibration  calibration_varience  \\\n",
       "0  Yes     True               12          8.500000              6.090909   \n",
       "1  Yes     True               12          4.500000              7.727273   \n",
       "2  Yes     True               12          8.833333              5.606061   \n",
       "\n",
       "   num_senses  mean_sense_estimation  sense_estimation_varience  \n",
       "0         100                   8.76                   3.840808  \n",
       "1         100                   6.18                   6.229899  \n",
       "2         100                   9.49                   1.464545  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imp.reload(data_cleaning)\n",
    "participant_metrics_df = pd.merge(participant_metrics_df,\n",
    "                                 data_cleaning.getParticipantMetrics(clean_sense_survey).reset_index(),\n",
    "                                 left_on = 'participant_id',\n",
    "                                 right_on='participant_id',\n",
    "                                 how='inner')\n",
    "participant_metrics_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop participants with no variation in calibration - they mess up spearmans\n",
    "bad_participants = participant_metrics_df[participant_metrics_df['calibration_varience']==0].participant_id\n",
    "clean_sense_survey = clean_sense_survey[~clean_sense_survey['participant_id'].isin(bad_participants)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spearmans Across Calibration Senses\n",
    "<a id='spearmans'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "calibration_entires = clean_sense_survey[clean_sense_survey['question_type']=='calibration']\n",
    "\n",
    "understand_list = list(set([sense if 'understand' in sense else '' for sense in calibration_entires.sense_question]))\n",
    "\n",
    "understand_calibration = calibration_entires[calibration_entires['sense_question'].isin(understand_list)]\n",
    "say_calibration = calibration_entires[~calibration_entires['sense_question'].isin(understand_list)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Understand Pairwise Spearmans\n",
      "Say Pairwise Spearmans\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jmankewitz/Projects/envs/sense_aoa_env/lib/python3.7/site-packages/numpy/lib/function_base.py:2534: RuntimeWarning: invalid value encountered in true_divide\n",
      "  c /= stddev[:, None]\n",
      "/Users/jmankewitz/Projects/envs/sense_aoa_env/lib/python3.7/site-packages/numpy/lib/function_base.py:2535: RuntimeWarning: invalid value encountered in true_divide\n",
      "  c /= stddev[None, :]\n",
      "/Users/jmankewitz/Projects/envs/sense_aoa_env/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in greater\n",
      "  return (a < x) & (x < b)\n",
      "/Users/jmankewitz/Projects/envs/sense_aoa_env/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:903: RuntimeWarning: invalid value encountered in less\n",
      "  return (a < x) & (x < b)\n",
      "/Users/jmankewitz/Projects/envs/sense_aoa_env/lib/python3.7/site-packages/scipy/stats/_distn_infrastructure.py:1912: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= _a)\n"
     ]
    }
   ],
   "source": [
    "imp.reload(data_cleaning)\n",
    "print('Understand Pairwise Spearmans')\n",
    "understand_pairwise_spearmans = data_cleaning.getPairwiseSpearmans(understand_calibration, \n",
    "                                                                   num_samples=40,\n",
    "                                                                  verbose=False)\n",
    "understand_pairwise_spearmans['question_group'] = 'understand'\n",
    "\n",
    "print(\"Say Pairwise Spearmans\")\n",
    "say_pairwise_spearmans = data_cleaning.getPairwiseSpearmans(say_calibration,\n",
    "                                                            num_samples=40,\n",
    "                                                           verbose=False)\n",
    "say_pairwise_spearmans['question_group'] = 'say'\n",
    "pairwise_spearmans_df = pd.concat([understand_pairwise_spearmans,say_pairwise_spearmans])\n",
    "pairwise_spearmans_df.to_csv(\"../data/pairwise_spearmans.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Understand Pairwise Spearmans\n",
      "470 40 0.014411314616032556\n",
      "476 40 0.05553216726275856\n",
      "477 40 0.022531484786659006\n",
      "479 40 0.02096690334977024\n",
      "480 40 -0.06760082311225145\n",
      "483 40 0.037587188269578985\n",
      "487 40 -0.0179935407962223\n",
      "488 40 0.007144975676883369\n",
      "489 40 -0.03256219818065871\n",
      "490 40 -0.000765387816956864\n",
      "493 40 0.06651149007973553\n",
      "495 40 0.04144972871876977\n",
      "497 40 0.08174221264760312\n",
      "500 40 -0.06440049367701292\n",
      "502 40 -0.025322050708760015\n",
      "506 40 -0.006232885598560341\n",
      "508 40 -0.013783500166337382\n",
      "509 40 -0.005545086742227648\n",
      "511 40 -0.07246119253339409\n",
      "513 40 -0.014239958286947144\n",
      "517 40 -0.019550602312744643\n",
      "520 40 0.013679249783320862\n",
      "521 40 -0.0027603392707408496\n",
      "522 40 0.10369564664412285\n",
      "523 40 0.04551582893041651\n",
      "524 40 -0.028441687678502924\n",
      "526 40 -0.002647459986468007\n",
      "527 40 -0.04325460495121268\n",
      "532 40 0.01600096858592061\n",
      "535 40 0.04979169672491096\n",
      "537 40 -0.02512020929453531\n",
      "538 40 -0.07689221309983743\n",
      "540 40 0.009913867215819423\n",
      "545 40 0.08658391341899802\n",
      "549 40 -0.06497024140395127\n",
      "551 40 0.10636917240022245\n",
      "553 40 -0.04515898585039026\n",
      "554 40 -0.059743209470435266\n",
      "555 40 -0.02548604620828916\n",
      "556 40 0.01639725369414951\n",
      "557 40 -0.0003774116711694961\n",
      "558 40 -0.026734209027468453\n",
      "560 40 -0.006457784640304815\n",
      "562 40 0.0652984656981028\n",
      "564 40 0.020874551497646075\n",
      "568 40 0.00260439719708985\n",
      "570 40 -0.029529286710861097\n",
      "572 40 0.040960924302269865\n",
      "575 40 -0.03770821958050315\n",
      "577 40 -0.07879387385827023\n",
      "578 40 0.028406312862047645\n",
      "580 40 -0.02175072781634652\n",
      "586 40 -0.02256985940725912\n",
      "587 40 -0.04849404396102991\n",
      "590 40 0.05025348608188971\n",
      "591 40 0.03141610557094314\n",
      "592 40 0.024365234018019953\n",
      "593 40 -0.04259259817371579\n",
      "595 40 -0.08021896532569532\n",
      "598 40 0.06771046712612555\n",
      "599 40 -0.09679229466699471\n",
      "601 40 -0.013459732473322841\n",
      "602 40 -0.03161771823839392\n",
      "604 40 -0.005345656772651591\n",
      "606 40 0.009684233740341941\n",
      "609 40 0.022257514986709154\n",
      "610 40 -0.04440655945772288\n",
      "612 40 -0.03190909988701053\n",
      "613 40 -0.02475015250552773\n",
      "614 40 0.009319528852611494\n",
      "616 40 0.009538037530485247\n",
      "617 40 -0.026434397994130998\n",
      "618 40 0.006154065202000525\n",
      "622 40 0.0069760564578214505\n",
      "624 40 0.020232300960204376\n",
      "627 40 -0.023401331147983203\n",
      "629 40 -0.038016129195185135\n",
      "630 40 0.017932701432267755\n",
      "633 40 -0.0964378882618689\n",
      "636 40 -0.0028404772697448676\n",
      "637 40 0.022635886764376452\n",
      "638 40 0.01842096216606024\n",
      "643 40 -0.034673713313648935\n",
      "647 40 0.04686467623584926\n",
      "648 40 0.004261952825643238\n",
      "649 40 -0.022734382130902377\n",
      "652 40 0.040818147711437866\n",
      "653 40 0.026863514239154757\n",
      "655 40 -0.041091322429564855\n",
      "656 40 0.019343028266274282\n",
      "662 40 0.08735065555213581\n",
      "666 40 0.06955591784081858\n",
      "671 40 -0.06723198611105607\n",
      "673 40 0.05653806206160884\n",
      "674 40 0.020742606883073583\n",
      "675 40 0.01835398331826014\n",
      "677 40 -0.041412947507539995\n",
      "678 40 -0.023578158918759463\n",
      "683 40 -0.017927529977902156\n",
      "684 40 0.021370868414880766\n",
      "686 40 0.03308752317315806\n",
      "688 40 -0.025961452352127212\n",
      "690 40 -0.007081161653305826\n",
      "693 40 -0.06776434825437869\n",
      "694 40 -0.0203260929266497\n",
      "695 40 -0.016706655845380357\n",
      "698 40 -0.018868836677199602\n",
      "699 40 0.006203978872058058\n",
      "700 40 0.0490358176791103\n",
      "705 40 -0.004619361035765131\n",
      "707 40 0.017744377006025658\n",
      "708 40 -0.004151790388246532\n",
      "709 40 -0.09293452724340279\n",
      "710 40 -0.03086361802531955\n",
      "711 40 -0.010549958064884624\n",
      "712 40 0.03373932371644463\n",
      "715 40 -0.017461454322375065\n",
      "716 40 -0.024438709269356852\n",
      "717 40 -0.018387282501465513\n",
      "721 40 -0.014475437661013769\n",
      "722 40 0.0032569284868558005\n",
      "727 40 -0.010962429255346642\n",
      "730 40 -0.04222207462621032\n",
      "731 40 0.06926544289228713\n",
      "732 40 -0.05578566244521993\n",
      "735 40 0.009174601345707467\n",
      "736 40 -0.01458191870920784\n",
      "740 40 -0.006633269234789125\n",
      "741 40 -0.05785688347867675\n",
      "742 40 0.028013361388984654\n",
      "743 40 0.010172835721640964\n",
      "744 40 0.012728948536943913\n",
      "745 40 -0.005571561261420155\n",
      "746 40 -0.025416421292044477\n",
      "748 40 0.04353857690249853\n",
      "749 40 -0.011537908034680622\n",
      "754 40 -0.08411381309238597\n",
      "755 40 0.07075065875514078\n",
      "756 40 0.002593037691542599\n",
      "757 40 -0.04032462903360975\n",
      "758 40 -0.05097514860278797\n",
      "761 40 0.01873423955714561\n",
      "763 40 0.04531248108789487\n",
      "768 40 -0.03783338660697159\n",
      "770 40 0.09171957390572275\n",
      "773 40 0.00977394176564198\n",
      "775 40 -0.04591366798522918\n",
      "776 40 -0.004367530520416485\n",
      "777 40 0.08036181944149028\n",
      "779 40 -0.014453136526672983\n",
      "781 40 0.08126945140062705\n",
      "782 40 -0.03738942445108625\n",
      "786 40 -0.07133888279148978\n",
      "789 40 -0.02032243345204373\n",
      "790 40 0.021502711539366937\n",
      "792 40 0.020339366185482474\n",
      "793 40 -0.004101534740531749\n",
      "794 40 0.04846100874027848\n",
      "801 40 -0.0343590299276469\n",
      "802 40 -0.03688123629264238\n",
      "804 40 0.011013090578298834\n",
      "805 40 0.032164354727625855\n",
      "806 40 0.023771312818058766\n",
      "808 40 0.004130046807115714\n",
      "811 40 -0.02822067713977936\n",
      "823 40 -0.0013221830584020876\n",
      "824 40 0.0424209670233754\n",
      "827 40 -0.02023564638848729\n",
      "829 40 0.03409561616352763\n",
      "830 40 -0.05391931441826372\n",
      "832 40 -0.014953450057049905\n",
      "835 40 -0.036261129681662174\n",
      "836 40 0.02253850935393543\n",
      "837 40 -0.035571011830762916\n",
      "841 40 -0.018956996689804086\n",
      "845 40 -0.024445830999465932\n",
      "847 40 -0.08012248285517964\n",
      "849 40 -0.032305691695054775\n",
      "850 40 0.018653426435105085\n",
      "852 40 0.04816994763177832\n",
      "853 40 0.042468291719837035\n",
      "855 40 0.004304032694627846\n",
      "856 40 -0.024105805974133344\n",
      "858 40 0.05210226834870715\n",
      "859 40 0.013942948159886734\n",
      "860 40 -0.04544213220622628\n",
      "863 40 -0.007347990122059162\n",
      "867 40 0.01564890536418604\n",
      "869 40 -0.04643932825731604\n",
      "871 40 0.0014193521945816841\n",
      "874 40 0.008583362202938438\n",
      "875 40 0.038323522772428495\n",
      "876 40 0.011142029573434702\n",
      "879 40 0.1178726596618794\n",
      "885 40 -0.08440930929947263\n",
      "887 40 -0.0565850138734487\n",
      "890 40 -0.037969934009708065\n",
      "891 40 0.01949357385929319\n",
      "892 40 -0.005940831156433471\n",
      "896 40 -0.005985453696875889\n",
      "900 40 -0.010205615461065737\n",
      "901 40 0.00937527658625705\n",
      "905 40 -0.02927369139607543\n",
      "908 40 0.03839611337317867\n",
      "909 40 0.04642258290917627\n",
      "910 40 0.05772524990502117\n",
      "911 40 0.006117182312820507\n",
      "914 40 0.07791464759824289\n",
      "915 40 -0.044701999175934835\n",
      "917 40 -0.03851269639786133\n",
      "918 40 0.008741832835002027\n",
      "923 40 -0.08375555297089428\n",
      "924 40 0.04801109191993848\n",
      "925 40 0.024193147402583805\n",
      "931 40 -0.007373656232239872\n",
      "932 40 -0.026846782741613916\n",
      "933 40 0.013818073993938723\n",
      "934 40 -0.09521433983094232\n",
      "935 40 -0.0434083672767346\n",
      "938 40 -0.04382049758383229\n",
      "941 40 0.07717564513268367\n",
      "945 40 -0.049107629742597386\n",
      "947 40 0.04400387108677334\n",
      "951 40 -0.043324533840863794\n",
      "952 40 0.015291466158228021\n",
      "953 40 -0.048798669470343385\n",
      "954 40 0.052973379674707353\n",
      "955 40 0.0010448650661163226\n",
      "957 40 0.007411886031485804\n",
      "961 40 0.026602783611774705\n",
      "962 40 -0.04800036633632267\n",
      "963 40 -0.010381627730068213\n",
      "968 40 -0.0323314124282828\n",
      "972 40 0.03135198808541641\n",
      "973 40 0.02640968792898942\n",
      "976 40 0.010803220886680894\n",
      "978 40 -0.02601623467366789\n",
      "981 40 -0.02794987140586404\n",
      "982 40 -0.03158265600083042\n",
      "986 40 0.0203843280953507\n",
      "988 40 0.03602317994759849\n",
      "989 40 0.022012882086915025\n",
      "992 40 0.09760905815287231\n",
      "995 40 0.018757303551770577\n",
      "996 40 -0.055005851752839605\n",
      "1002 40 -0.0766779371426258\n",
      "1003 40 0.015682891143589374\n",
      "1005 40 -0.054261624946514694\n",
      "1008 40 -0.00750832268236849\n",
      "1011 40 -0.03571340585882947\n",
      "1012 40 0.11945571373280961\n",
      "1013 40 -0.06096436330412787\n",
      "1014 40 -0.10530415972524729\n",
      "1015 40 -0.03200993031486393\n",
      "1019 40 0.0509013936641234\n",
      "1020 40 0.03210026889159955\n",
      "1021 40 0.021562629239729948\n",
      "1022 40 0.05936251894649676\n",
      "1025 40 0.1138176629371546\n",
      "1028 40 -0.04842892034938745\n",
      "1031 40 -0.06261513071980156\n",
      "1032 40 0.013216059167135075\n",
      "1034 40 -0.05784948953808514\n",
      "1035 40 0.028268329344242626\n",
      "1038 40 -0.045445863642137485\n",
      "1041 40 0.03533337882822848\n",
      "1042 40 -0.02336638187730287\n",
      "1046 40 0.08264249752138207\n",
      "1049 40 0.03858817420563096\n",
      "1050 40 0.00806126247255905\n",
      "1051 40 0.022003421976224263\n",
      "1053 40 -0.06894879752935974\n",
      "1054 40 0.016955364707847156\n",
      "1055 40 -0.017840864255689634\n",
      "1056 40 0.004322617396664408\n",
      "1058 40 0.09124617620926853\n",
      "1060 40 0.009196501371367327\n",
      "1061 40 0.007640241703670572\n",
      "1064 40 -0.04045598363335019\n",
      "1065 40 -0.017570411083383138\n",
      "1066 40 0.0002664930274422661\n",
      "1068 40 0.021020599640018227\n",
      "1070 40 0.040461315008258066\n",
      "1074 40 0.01991393910244657\n",
      "1078 40 0.029570351966765884\n",
      "1079 40 0.021194989989459394\n",
      "1081 40 -0.062500378975864\n",
      "1082 40 -0.050861560424375785\n",
      "1083 40 0.02338627992799668\n",
      "1085 40 0.00025166953553596436\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1086 40 0.03222525671015257\n",
      "1088 40 -0.0407205865905537\n",
      "1089 40 0.0009381432853911243\n",
      "1093 40 -0.009973726517048443\n",
      "1095 40 -0.03022216554737639\n",
      "1096 40 -0.061262871340860246\n",
      "1101 40 0.006699442269540357\n",
      "1103 40 -0.012199882069276918\n",
      "1106 40 -0.031973717723656536\n",
      "1109 40 -0.08004474405459613\n",
      "1112 40 -0.02409013936674973\n",
      "1114 40 -0.03891059275043281\n",
      "1115 40 -0.0012473554843562607\n",
      "1116 40 0.021863876962669147\n",
      "1118 40 0.07422948821615906\n",
      "1119 40 0.06998012731310234\n",
      "1121 40 -0.018006470001323733\n",
      "1123 40 0.026915960276600752\n",
      "1128 40 -0.09286108362069445\n",
      "1129 40 -0.04857540294147699\n",
      "1131 40 0.035105354772360896\n",
      "1135 40 -0.01230966684819292\n",
      "1136 40 0.06006732059930777\n",
      "1137 40 -0.0681588501226057\n",
      "1138 40 -0.06433364194683204\n",
      "1139 40 0.05459890554784819\n",
      "1143 40 -0.04382970167728969\n",
      "1144 40 -0.02313776885152132\n",
      "1145 40 -0.0016128186408202003\n",
      "1146 40 -0.03013015717604774\n",
      "1147 40 0.08719457119494307\n",
      "1152 40 0.0420027243464453\n",
      "1153 40 0.018181355675969974\n",
      "1155 40 0.04734520532145783\n",
      "1158 40 0.013633522021217237\n",
      "1165 40 0.04110820157555088\n",
      "1167 40 -0.04752930679525885\n",
      "1168 40 0.041483662601539836\n",
      "1169 40 0.07827212645925179\n",
      "1170 40 0.03961779055372179\n",
      "1171 40 0.03124679115364263\n",
      "1174 40 -0.060825438087364146\n",
      "1176 40 -0.01026718116792405\n",
      "1177 40 0.05518846593122061\n",
      "1178 40 0.023162133877510017\n",
      "1180 40 0.06015208879027896\n",
      "1184 40 0.051654144259299775\n",
      "1185 40 0.034062188270197614\n",
      "1189 40 0.0005374593454869389\n",
      "1193 40 0.09976401044363489\n",
      "1194 40 0.06990051190043972\n",
      "1198 40 -0.006019379877714404\n",
      "1199 40 0.028136135711546488\n",
      "1200 40 -0.053647583215782335\n",
      "1201 40 0.07110337899181923\n",
      "1203 40 0.04175826908504625\n",
      "1204 40 0.009803536825190858\n",
      "1206 40 -0.026152245271865826\n",
      "1208 40 0.020547082537240625\n",
      "1209 40 -0.06573703414366434\n",
      "1212 40 -0.02858295118141872\n",
      "1213 40 -0.028763588389139855\n",
      "1215 40 0.011266041153936989\n",
      "1217 40 -0.058112621548062696\n",
      "1219 40 -0.05691287203685602\n",
      "1221 40 0.053144234992994546\n",
      "1228 40 -0.06507352428241224\n",
      "1229 40 -0.0055467643264096285\n",
      "1231 40 0.027050269857986864\n",
      "1233 40 0.03394135415842529\n",
      "1234 40 0.00010363247716194124\n",
      "1235 40 -0.0469880876309996\n",
      "1237 40 -0.03545794288471547\n",
      "1241 40 0.00023539368304700825\n",
      "1244 40 0.0537578897568883\n",
      "1247 40 -0.06545327531294667\n",
      "1248 40 -0.04084988306003913\n",
      "1249 40 -0.059402027115345354\n",
      "1253 40 0.008329260269364376\n",
      "1257 40 0.04802196431583564\n",
      "1259 40 0.008617068979558298\n",
      "1261 40 -0.057078893369296245\n",
      "1262 40 0.04773141055931644\n",
      "1263 40 0.0007582061829910447\n",
      "1265 40 0.06925588049188677\n",
      "1266 40 0.019671928324122838\n",
      "1268 40 -0.014804353278294675\n",
      "1270 40 -0.045713395569426794\n",
      "1274 40 0.03476843122466179\n",
      "1276 40 0.0029833801580915406\n",
      "1278 40 -0.03474871754280097\n",
      "1279 40 -0.00023588699428105374\n",
      "1280 40 0.03376622101531608\n",
      "1281 40 0.0021665725298726903\n",
      "1282 40 0.13464552810951505\n",
      "1284 40 -0.022641883486630078\n",
      "1285 40 -0.04178144023804463\n",
      "1291 40 -0.026544486845496058\n",
      "1292 40 -0.07118786845652167\n",
      "1293 40 -0.021793660867568378\n",
      "1294 40 0.06740636550426435\n",
      "1296 40 0.0916857493928719\n",
      "1298 40 -0.009357323695256117\n",
      "1299 40 -0.07085285739721092\n",
      "1301 40 -0.03133231599318651\n",
      "1303 40 0.08618461528068597\n",
      "1305 40 0.07055257082373383\n",
      "1308 40 0.06402671464299277\n",
      "1312 40 0.026333193799130728\n",
      "1313 40 -0.06580075156231983\n",
      "1314 40 0.015577000254856869\n",
      "1317 40 0.008677073390416543\n",
      "1320 40 -0.011716239411685352\n",
      "1321 40 -0.033031439468269044\n",
      "1322 40 0.04969502224714033\n",
      "1324 40 -0.01303497860661027\n",
      "1325 40 -0.018347351514232356\n",
      "1328 40 -0.10634307172770847\n",
      "1330 40 -0.03129472077485436\n",
      "1332 40 0.07741133227131188\n",
      "1333 40 0.08831693068270831\n",
      "1339 40 -0.07515682395896375\n",
      "1340 40 -0.05493594908540892\n",
      "1342 40 0.06499000852655484\n",
      "1343 40 -0.022009838203663597\n",
      "1348 40 0.007875863735825422\n",
      "1351 40 0.07262883071534135\n",
      "1354 40 0.0045276353488094\n",
      "1355 40 -0.008393354236839993\n",
      "1357 40 -0.03957159884040755\n",
      "1358 40 0.08439770284473627\n",
      "1360 40 0.07169513081804273\n",
      "1363 40 -0.021889487872933874\n",
      "1364 40 0.002128248423551485\n",
      "1367 40 0.03397109920057775\n",
      "1370 40 0.003700121873234527\n",
      "1371 40 0.011387177614437066\n",
      "1372 40 -0.03519919935259632\n",
      "1376 40 0.05022393213686579\n",
      "1378 40 -0.05561446884950465\n",
      "1379 40 -0.012830705958924165\n",
      "1381 40 -0.04691038371519979\n",
      "1382 40 0.11597339277049287\n",
      "1383 40 -0.07674048473274023\n",
      "1384 40 -0.005183188438818209\n",
      "1385 40 -0.0038609074025100663\n",
      "1390 40 -0.015466191634149112\n",
      "1391 40 0.031327153245757564\n",
      "1393 40 0.12546017146558933\n",
      "1395 40 0.000587961378275853\n",
      "1397 40 -0.023638295373418324\n",
      "1399 40 -0.036659989853269945\n",
      "1400 40 0.019456794211761896\n",
      "1401 40 -0.017186676801224536\n",
      "1402 40 0.004851430070361535\n",
      "1403 40 0.020033720901542894\n",
      "1406 40 0.025091807406938706\n",
      "1407 40 -0.0325291618228023\n",
      "1412 40 -0.02444901260756218\n",
      "1413 40 -0.031496001919221236\n",
      "1416 40 0.039832483489460606\n",
      "1417 40 -0.027591690883780884\n",
      "1418 40 -0.050781969381632396\n",
      "1422 40 0.002656749256878882\n",
      "1423 40 -0.00596910876347218\n",
      "1425 40 0.0407134482643519\n",
      "1429 40 0.009280261774261157\n",
      "1430 40 -0.012666119964484138\n",
      "1431 40 0.01295451153979361\n",
      "1432 40 0.019151297916645493\n",
      "1433 40 -0.015603283125607392\n",
      "1435 40 -0.054977791680266286\n",
      "1437 40 -0.004179202449161884\n",
      "1438 40 -0.13285470022117368\n",
      "1439 40 0.06662649577862802\n",
      "1440 40 0.0015910907758854898\n",
      "1445 40 -0.016087568911718426\n",
      "1450 40 0.01691241573115574\n",
      "1451 40 0.04194194247900325\n",
      "1452 40 0.02823713479624047\n",
      "1453 40 0.019959093439440377\n",
      "1457 40 -0.065604464491296\n",
      "1459 40 -0.03606758410635018\n",
      "1460 40 0.05615117370483702\n",
      "1463 40 -0.009051078103951376\n",
      "1464 40 0.028536433962807035\n",
      "1468 40 -0.02538444494154863\n",
      "1469 40 0.0575895745747268\n",
      "1473 40 -0.013351371946988488\n",
      "1475 40 -0.004735419866703558\n",
      "1476 40 -0.050324099529791756\n",
      "1478 40 0.008293553749960996\n",
      "1482 40 -0.07705698301896828\n",
      "1485 40 -0.02887015982073778\n",
      "1487 40 -0.0057109324407282145\n",
      "1488 40 -0.04375580133083649\n",
      "1491 40 -0.06429854318162345\n",
      "1492 40 0.07966249984954968\n",
      "1493 40 0.01078599374794642\n",
      "1496 40 0.0929377101142433\n",
      "1498 40 0.11513941485727457\n",
      "1499 40 -0.014099527257323935\n",
      "1502 40 -0.040101805710284315\n",
      "1504 40 -0.01454780607161089\n",
      "1505 40 -0.032575469343770626\n",
      "1507 40 0.054333204011522196\n",
      "1508 40 -0.0330750382936563\n",
      "1509 40 0.03781213910638973\n",
      "1512 40 0.02806210583533658\n",
      "1517 40 -0.07859896042958553\n",
      "1518 40 -0.05123324858928139\n",
      "1519 40 -0.1178685706822719\n",
      "1521 40 -0.06149904157810795\n",
      "1523 40 0.00527227156651115\n",
      "1525 40 0.0800495296847981\n",
      "1527 40 0.06416868882948674\n",
      "1529 40 -0.05002882886971716\n",
      "1530 40 0.018152438893193467\n",
      "1532 40 0.0505341489617863\n",
      "1536 40 -0.037817001639862735\n",
      "1539 40 -0.03033221721262469\n",
      "1541 40 0.018860251061118476\n",
      "1542 40 -0.003183894688258909\n",
      "1544 40 0.030299143400516527\n",
      "1547 40 -0.005898346890927028\n",
      "1549 40 -0.0012330692850516967\n",
      "1553 40 -0.08449817168489361\n",
      "1555 40 0.030228433685144086\n",
      "1557 40 0.038004418862853495\n",
      "1558 40 -0.017165907149129488\n",
      "1564 40 0.08919591300762861\n",
      "1565 40 -0.009228243478475515\n",
      "1566 40 -0.030780091811124448\n",
      "1567 40 -0.026697131033733522\n",
      "1569 40 -0.013441805360168188\n",
      "1571 40 0.0445014647217092\n",
      "1572 40 -0.008634395851316836\n",
      "1573 40 -0.06935063566609521\n",
      "1574 40 0.0006779618658078856\n",
      "1576 40 0.026096385982945825\n",
      "1577 40 -0.010199321948019294\n",
      "1578 40 -0.015287603947570134\n",
      "1581 40 0.06653531359238388\n",
      "1582 40 0.0006786913937456091\n",
      "1584 40 0.033119455263553074\n",
      "1588 40 -0.05378275151498082\n",
      "1589 40 -0.007544514589252237\n",
      "1592 40 0.021840324456420257\n",
      "1594 40 -0.011849606439979793\n",
      "1597 40 -0.033299216887907934\n",
      "1598 40 -0.060499043109819295\n",
      "1601 40 0.07104662655954389\n",
      "1602 40 -0.048447920985157863\n",
      "1603 40 -0.05123881836533103\n",
      "1604 40 0.033302508233753504\n",
      "1607 40 0.05410729878606033\n",
      "1609 40 -0.04691305568163886\n",
      "1610 40 0.0814942407720248\n",
      "1613 40 0.02294658099424628\n",
      "1618 40 0.0330800129566237\n",
      "1619 40 0.057867057863589144\n",
      "1621 40 0.03893875075316387\n",
      "1622 40 0.037253779229587135\n",
      "1623 40 0.005571848744281857\n",
      "1626 40 0.058843970816509626\n",
      "1634 40 0.02646905458478287\n",
      "1635 40 0.09366233715105465\n",
      "1636 40 0.0006671342229155775\n",
      "1637 40 0.0858456352121196\n",
      "1638 40 0.007675853580496978\n",
      "1642 40 0.07815672986687475\n",
      "1643 40 -0.040258450264732105\n",
      "1644 40 -0.030256155096253207\n",
      "1646 40 0.05080953159459546\n",
      "1647 40 -0.06166575946228392\n",
      "1648 40 -0.021532693837111816\n",
      "1654 40 0.046733190475619156\n",
      "1655 40 0.024410670605957075\n",
      "1657 40 -0.05313022151418332\n",
      "1661 40 0.039566810945288064\n",
      "1662 40 -0.030860475777151796\n",
      "1665 40 -0.011593600258210185\n",
      "1666 40 -0.005330270019421754\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1669 40 0.1240316010180957\n",
      "1671 40 0.024904636643322313\n",
      "1673 40 0.00591878570382709\n",
      "1675 40 -0.02352581766440623\n",
      "1676 40 0.06509275308674524\n",
      "1681 40 -0.02417265917666588\n",
      "1685 40 0.0131420143229938\n",
      "1687 40 -0.037902096620793135\n",
      "1692 40 -0.05431544040960194\n",
      "1693 40 0.03418576341911397\n",
      "1694 40 0.06586921943529334\n",
      "1699 40 0.046470433822714693\n",
      "1700 40 -0.0403046584810989\n",
      "1701 40 0.02414066290063187\n",
      "1702 40 0.0004218187096150905\n",
      "1703 40 -0.07857921135123688\n",
      "1705 40 -0.03918573329221548\n",
      "1706 40 0.03828080277418126\n",
      "1709 40 0.04563287843989295\n",
      "1712 40 0.036140756892984974\n",
      "1715 40 0.05351443698813707\n",
      "1716 40 0.053147708549220254\n",
      "1719 40 -0.003935423274607419\n",
      "1720 40 0.002629357768749399\n",
      "1721 40 -0.0622584523228341\n",
      "1724 40 -0.008119102926829824\n",
      "1726 40 0.049940886727630626\n",
      "1729 40 -0.0005225618214047018\n",
      "1730 40 -0.0460969848972924\n",
      "1732 40 0.027861725610351863\n",
      "1734 40 -0.021676870393004193\n",
      "1736 40 0.0350668666529623\n",
      "1739 40 -0.0038343325673889316\n",
      "1741 40 -0.06097976283361789\n",
      "1744 40 0.0212903748187539\n",
      "1747 40 0.03124264043999082\n",
      "1750 40 -0.015124689516232978\n",
      "1752 40 -0.003058789256481323\n",
      "1753 40 -0.059088090589069255\n",
      "1757 40 -0.07103603957748145\n",
      "1759 40 0.03544506604561556\n",
      "1760 40 0.053449293994074186\n",
      "1761 40 0.008281275041432579\n",
      "1762 40 0.07760226779995893\n",
      "1765 40 0.0608781321508675\n",
      "1769 40 -0.0006672982308882164\n",
      "1772 40 -0.035271777783464936\n",
      "1773 40 0.058762172586890385\n",
      "1775 40 0.03365529073913672\n",
      "1776 40 0.049905678488018204\n",
      "1779 40 -0.06464587591430118\n",
      "1781 40 -0.052041584727944956\n",
      "1782 40 0.04070019467363693\n",
      "1783 40 -0.012188168466474403\n",
      "1786 40 0.05333350101948027\n",
      "1787 40 0.0025019710083613146\n",
      "1790 40 0.047274454677153806\n",
      "1791 40 0.05928379523846512\n",
      "1792 40 -0.03450937451642395\n",
      "1793 40 -0.014388421619400687\n",
      "1797 40 -0.04379176796786577\n",
      "1800 40 0.01800188275412376\n",
      "1802 40 0.022537311404753315\n",
      "1803 40 -0.024666699901701887\n",
      "1804 40 0.014490625703453369\n",
      "1805 40 0.004897872477016336\n",
      "1806 40 -0.0015140893272574286\n",
      "1810 40 -0.04752024263394351\n",
      "1812 40 -0.001500646249750623\n",
      "1813 40 -0.09065676860834712\n",
      "1814 40 0.013274986782736633\n",
      "1815 40 0.03359490636778916\n",
      "1818 40 0.005704148890260674\n",
      "1819 40 0.04920559201836987\n",
      "1820 40 -0.025029418597131748\n",
      "1825 40 0.011706378083965508\n",
      "1826 40 0.011812063220961086\n",
      "1831 40 0.016461347497029388\n",
      "1832 40 -0.07436310439816272\n",
      "1833 40 -0.0875318842828765\n",
      "1835 40 -0.03838289596991749\n",
      "1842 40 0.008871677231458958\n",
      "1844 40 0.04253774346599839\n",
      "1846 40 -0.00013169673903444258\n",
      "1848 40 0.02221301811191856\n",
      "1850 40 -0.04330175026807433\n",
      "1855 40 -0.08449260758587365\n",
      "1857 40 0.05724362259543385\n",
      "1858 40 -0.05145911626621826\n",
      "1859 40 0.010755397688359376\n",
      "1861 40 -0.014069387560505048\n",
      "1867 40 0.08572852360296233\n",
      "1869 40 0.04544088468258482\n",
      "1870 40 -0.024702412601189456\n",
      "1873 40 0.07098457706188993\n",
      "1874 40 0.06079592166091112\n",
      "1876 40 -0.08021099680615043\n",
      "1877 40 0.002783785807910713\n",
      "1880 40 0.0012203562072284901\n",
      "1883 40 0.05033110933664323\n",
      "1885 40 0.04395007306314602\n",
      "1888 40 0.00958399966643966\n",
      "1889 40 0.020747900686111858\n",
      "1893 40 -0.020070555052980204\n",
      "1894 40 0.02203454461380899\n",
      "1895 40 0.0465551680655034\n",
      "1897 40 0.0052479601417585175\n",
      "1899 40 -0.04470829145247278\n",
      "1901 40 0.023577471489853598\n",
      "1902 40 -0.026472534575325835\n",
      "1905 40 0.0027328790083560707\n",
      "1907 40 -0.05224984705789013\n",
      "1908 40 0.00036517621488756926\n",
      "1910 40 0.0009000527486139498\n",
      "1911 40 -0.056064227291615885\n",
      "1913 40 -0.0056381748050680245\n",
      "1914 40 4.061733688474067e-05\n",
      "1920 40 0.05771881386517563\n",
      "1921 40 0.034759507433339346\n",
      "1922 40 0.007279616410173722\n",
      "1923 40 0.0027423946651747534\n",
      "1925 40 0.019285652263796915\n",
      "1927 40 0.007663056940334598\n",
      "1930 40 0.049231374629116656\n",
      "1933 40 0.03881450302063262\n",
      "1934 40 -0.005258808613097072\n",
      "1936 40 -0.07350283242066877\n",
      "1938 40 0.08687538430221334\n",
      "1941 40 0.01029436398953331\n",
      "1942 40 0.06431007861254903\n",
      "1946 40 0.04824649411881171\n",
      "1947 40 0.03879749158440264\n",
      "1951 40 -0.06564644589835272\n",
      "1952 40 0.04321701632626374\n",
      "1953 40 -0.031934146651170316\n",
      "1956 40 -0.04958022615769503\n",
      "1958 40 -0.09025734709627008\n",
      "1961 40 -0.009838818440102117\n",
      "1963 40 0.0025966697810604787\n",
      "1964 40 -0.026995519589769458\n",
      "1968 40 0.026804528821307617\n",
      "1969 40 0.028748546651038154\n",
      "1971 40 0.022947068942647024\n",
      "1972 40 0.004280044133085042\n",
      "1973 40 0.015814884469760777\n",
      "1978 40 0.05876828737723179\n",
      "1981 40 0.04105450902442618\n",
      "1985 40 -0.08445221286773189\n",
      "1987 40 -0.03717136058746526\n",
      "1990 40 -0.03915507067791703\n",
      "1992 40 0.09783288054675307\n",
      "1993 40 0.06909578318374977\n",
      "1995 40 0.045969012166522535\n",
      "1996 40 -0.035944279126819766\n",
      "1997 40 -0.11517488878857196\n",
      "2006 40 0.03544815754140427\n",
      "2008 40 0.07584981739000107\n",
      "2073 40 0.026099765839635292\n",
      "2085 40 -0.044129267020062826\n",
      "2096 40 -0.04395946036598322\n",
      "2098 40 0.07887633899804836\n",
      "2102 40 0.057948358730683935\n",
      "2118 40 -0.05408260971288661\n",
      "2121 40 -0.06757815676041098\n",
      "2156 40 -0.0416407154982866\n",
      "2159 40 -0.03242711216072799\n",
      "2161 40 0.052302103262805245\n",
      "2178 40 -0.05079832040128206\n",
      "2197 40 0.09827240536262963\n",
      "2198 40 0.0655736471434005\n",
      "2217 40 0.040051721914965935\n",
      "Random Say Pairwise Spearmans\n",
      "1 40 -0.007323615738145167\n",
      "2 40 0.028409346706437216\n",
      "3 40 0.023101866046058885\n",
      "4 40 0.1060109326821664\n",
      "5 40 0.002128243023688392\n",
      "6 40 -0.0009050164534622582\n",
      "7 40 0.05646665239370757\n",
      "8 40 -0.04257575645336588\n",
      "9 40 0.010632749263949895\n",
      "10 40 0.010371281546858272\n",
      "11 40 -0.0031099928404593967\n",
      "13 40 -0.0617119770276261\n",
      "16 40 -0.005591531586838175\n",
      "17 40 0.004966390591841854\n",
      "18 40 -0.10182010506489547\n",
      "19 40 -0.009098540169990534\n",
      "20 40 0.019662568689404983\n",
      "21 40 -0.016959360956930625\n",
      "22 40 0.02671826877153969\n",
      "23 40 0.0471230802245476\n",
      "24 40 -0.09237549110749917\n",
      "25 40 0.04986211091386754\n",
      "26 40 0.05754575165586266\n",
      "27 40 0.055242067532265314\n",
      "28 40 -0.09084131037833765\n",
      "29 40 0.060820405084853035\n",
      "30 40 0.06082359476926198\n",
      "31 40 0.07216723450655661\n",
      "32 40 0.003958644820865609\n",
      "33 40 0.03527559288365453\n",
      "34 40 -0.0031882357604584174\n",
      "35 40 -0.012152517511505988\n",
      "36 40 -0.0467082760997921\n",
      "37 40 -0.03716607848785129\n",
      "38 40 -0.013677979184163375\n",
      "39 40 -0.06469526466452956\n",
      "40 40 -0.012807983415743737\n",
      "41 40 -0.031536978682063545\n",
      "42 40 0.0606810486666506\n",
      "43 40 -0.018015606962243948\n",
      "44 40 -0.049896937322620474\n",
      "45 40 0.049955116956149695\n",
      "46 40 -0.05942522249154765\n",
      "47 40 0.04789859783401655\n",
      "48 40 0.031925218124177236\n",
      "49 40 -0.02845939886021237\n",
      "50 40 -0.010383564932992011\n",
      "51 40 0.02182924056772645\n",
      "52 40 -0.005191025892518508\n",
      "53 40 0.07364940343653656\n",
      "54 40 -0.018107474089614908\n",
      "55 40 -0.05037500219409539\n",
      "56 40 0.0175835668638287\n",
      "57 40 0.058338939121554065\n",
      "58 40 0.1460177887724262\n",
      "59 40 0.06700415445388497\n",
      "60 40 0.0254827396756801\n",
      "61 40 0.01556507535954318\n",
      "62 40 -0.052105342397372224\n",
      "63 40 0.03905796649802107\n",
      "64 40 -0.025452534623951834\n",
      "65 40 -0.08485850552714166\n",
      "67 40 -0.02825153611491924\n",
      "68 40 -0.004892631174051626\n",
      "69 40 -0.007673346237304082\n",
      "70 40 0.01268677394361734\n",
      "71 40 -0.0402930672984943\n",
      "72 40 -0.06374019514788952\n",
      "73 40 -0.019838439770043563\n",
      "74 40 0.040481727536132675\n",
      "75 40 0.04483378803095606\n",
      "76 40 -0.0077914809584438225\n",
      "77 40 0.026074603574183064\n",
      "78 40 0.0816474112026465\n",
      "79 40 -0.085620653175311\n",
      "80 40 -0.058868456340852734\n",
      "81 40 0.05381243323353295\n",
      "82 40 -0.0352104678277604\n",
      "84 40 -0.038439742284880854\n",
      "85 40 -0.00826632903056753\n",
      "86 40 0.025156457116784502\n",
      "87 40 0.06668490156233195\n",
      "88 40 0.06730529801828686\n",
      "89 40 -0.01579091708389257\n",
      "90 40 -0.06289225298417209\n",
      "91 40 -0.058748571346628274\n",
      "92 40 -0.015301175570906017\n",
      "93 40 0.01741519418815815\n",
      "94 40 -0.05848155636138006\n",
      "95 40 -0.09114085462890048\n",
      "96 40 -0.03600121214066086\n",
      "97 40 0.10905518079840107\n",
      "98 40 -0.007483772175477611\n",
      "99 40 -0.0805037067083957\n",
      "101 40 0.05150262162610049\n",
      "102 40 -0.03924479235351972\n",
      "103 40 -0.015182257194762665\n",
      "104 40 0.03144261396307478\n",
      "105 40 -0.003351834327153638\n",
      "106 40 0.01100213672387007\n",
      "107 40 0.0031592223032456206\n",
      "108 40 -0.0891520904373471\n",
      "109 40 0.04268789875261318\n",
      "110 40 0.056041325758658014\n",
      "111 40 -0.019560944830077098\n",
      "112 40 -0.0050721343875921605\n",
      "113 40 -0.02282763227805138\n",
      "114 40 -0.08054988428312639\n",
      "115 40 0.0027717194808610903\n",
      "116 40 -0.007310503661537829\n",
      "117 40 -0.02205487601511278\n",
      "118 40 0.0907342708546566\n",
      "120 40 0.02975794228602266\n",
      "121 40 -0.07524919201720424\n",
      "123 40 0.08561889128452774\n",
      "124 40 0.027502028127536222\n",
      "125 40 -0.06111267644718672\n",
      "126 40 -0.05292688099868355\n",
      "127 40 -0.042971488962031575\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "128 40 0.049352639543473874\n",
      "129 40 -0.0005168151109124885\n",
      "130 40 0.07473213595645632\n",
      "131 40 -0.03293573585449683\n",
      "132 40 0.0005110102543317438\n",
      "133 40 -0.0004029922076986811\n",
      "134 40 0.058726996202432824\n",
      "135 40 -0.07713794680487181\n",
      "136 40 -0.009940720412452739\n",
      "137 40 0.06204086790968897\n",
      "138 40 -0.023641280232188373\n",
      "139 40 0.06782810993244834\n",
      "140 40 -0.036551428188422774\n",
      "141 40 0.06921191528787567\n",
      "142 40 -0.01419154706326122\n",
      "143 40 -0.005061264098397305\n",
      "144 40 0.074305701808062\n",
      "145 40 0.004852132528484374\n",
      "146 40 0.061371019985299514\n",
      "147 40 -0.07837929137377879\n",
      "148 40 0.0013649586908930423\n",
      "149 40 -0.03800399116676968\n",
      "150 40 -0.05577052190930334\n",
      "151 40 -0.07803111468374643\n",
      "152 40 -0.036023624587883475\n",
      "153 40 0.07319339973023233\n",
      "154 40 0.04070216045773507\n",
      "155 40 0.0779822523195037\n",
      "156 40 -0.128349364905389\n",
      "157 40 -0.01971554157342654\n",
      "158 40 -0.001950802617204614\n",
      "159 40 0.018391551112848757\n",
      "160 40 -0.02699435874714199\n",
      "161 40 -0.06630744239875\n",
      "162 40 -0.017661120295816547\n",
      "163 40 0.03609559124154974\n",
      "164 40 -0.1208964153756433\n",
      "165 40 -0.04967820494548995\n",
      "166 40 -0.09818757294277666\n",
      "167 40 0.018357204905562384\n",
      "168 40 -0.02536574885390992\n",
      "169 40 -0.0666984066971176\n",
      "170 40 -0.0720250453522806\n",
      "171 40 0.02545164176945604\n",
      "172 40 0.007772071317207918\n",
      "173 40 0.003421479660317417\n",
      "174 40 0.02424318794210447\n",
      "175 40 0.05255889359925829\n",
      "176 40 0.04099585311917288\n",
      "177 40 0.033607764084260236\n",
      "178 40 -0.09480867410532962\n",
      "180 40 0.011172047291634507\n",
      "181 40 0.026083203023593134\n",
      "182 40 -0.03975113736917746\n",
      "184 40 -0.037200097852371786\n",
      "185 40 0.01830416651624278\n",
      "186 40 0.006838147457429109\n",
      "187 40 0.07088286659421802\n",
      "188 40 0.04696569033237202\n",
      "189 40 0.0774156398408383\n",
      "190 40 0.08278121883463516\n",
      "191 40 0.05362348841352334\n",
      "192 40 0.08494433843764979\n",
      "193 40 -0.030759171386527874\n",
      "194 40 0.00873789447728634\n",
      "195 40 0.05263904874252332\n",
      "196 40 0.053277325054474\n",
      "197 40 -0.02982567966940896\n",
      "198 40 -0.0007281600815314537\n",
      "199 40 -0.057097865965000896\n",
      "200 40 0.012123064627450492\n",
      "201 40 -0.013186026725911326\n",
      "202 40 -0.0019329547967262522\n",
      "204 40 0.0365325093971096\n",
      "206 40 0.006703149627410471\n",
      "207 40 0.002133708978413065\n",
      "208 40 0.05579929186445274\n",
      "209 40 0.018305899932157484\n",
      "211 40 0.01628393009427192\n",
      "212 40 -0.04075578573713763\n",
      "214 40 -0.003826617644598245\n",
      "215 40 0.10156317351608375\n",
      "216 40 0.021068124237783918\n",
      "217 40 -0.036833955774871405\n",
      "218 40 0.036195831015147895\n",
      "219 40 -0.010561510595988746\n",
      "220 40 0.014542265506311275\n",
      "221 40 -0.03769680009522175\n",
      "222 40 -0.061074429272396924\n",
      "223 40 0.07405404696536211\n",
      "224 40 -0.05916986639090249\n",
      "225 40 -0.03339995764393226\n",
      "226 40 0.06667106367359192\n",
      "227 40 -0.024326418697631236\n",
      "228 40 -0.00028050004897833825\n",
      "229 40 0.03094799953982791\n",
      "230 40 0.04875821534940915\n",
      "231 40 -0.09804850300204324\n",
      "232 40 -0.0337962189278435\n",
      "233 40 -0.0030920605138710423\n",
      "234 40 -0.08367227581501309\n",
      "235 40 -0.05245367268679487\n",
      "236 40 0.016969083865107537\n",
      "237 40 0.07635810758218448\n",
      "238 40 0.017331233414869897\n",
      "239 40 0.00449977649683406\n",
      "240 40 0.0070392726411548975\n",
      "241 40 -0.04527137970568686\n",
      "242 40 0.0381786829520042\n",
      "243 40 -0.08597442385334066\n",
      "244 40 0.03713638141119648\n",
      "245 40 0.051965526895988504\n",
      "246 40 0.02626646656605421\n",
      "247 40 -0.10415982020365507\n",
      "248 40 -0.006719265673819541\n",
      "249 40 0.004998358936072733\n",
      "250 40 -0.030489302454806542\n",
      "251 40 -0.04881799295166211\n",
      "252 40 -0.005388703689416197\n",
      "253 40 -0.11548301923050719\n",
      "254 40 0.02712162401695577\n",
      "256 40 -0.055810578308058814\n",
      "257 40 -0.05549634292431928\n",
      "258 40 -0.07915647344301865\n",
      "259 40 0.01578288243278267\n",
      "260 40 0.0015754680966056978\n",
      "261 40 -0.03373203874140639\n",
      "262 40 0.0030344037944390278\n",
      "263 40 0.01716443478612691\n",
      "264 40 0.005622254927842091\n",
      "265 40 -0.0440325288268536\n",
      "267 40 -0.061751594758852855\n",
      "268 40 -0.07833497247153913\n",
      "269 40 -0.035488341685167804\n",
      "270 40 0.024630795423774676\n",
      "271 40 0.01873034898233137\n",
      "272 40 0.03465150369519755\n",
      "273 40 0.044618926350431076\n",
      "274 40 0.01670868006086934\n",
      "275 40 -0.009316779446288117\n",
      "276 40 -0.09106861396029457\n",
      "277 40 0.041161161144507886\n",
      "278 40 -0.03453759919889278\n",
      "279 40 -0.002166287877540013\n",
      "280 40 -0.056956714250037156\n",
      "281 40 0.011451483139069185\n",
      "282 40 -0.05078431166727489\n",
      "283 40 -0.04296036022721904\n",
      "284 40 -0.039694624558138374\n",
      "285 40 0.04773390165655397\n",
      "287 40 -0.0007383906784762251\n",
      "288 40 -0.09530414329120507\n",
      "289 40 0.03831003221273157\n",
      "290 40 0.060158199519126376\n",
      "291 40 0.08972527439256553\n",
      "292 40 -0.0027627493375089684\n",
      "293 40 -0.029475797441732666\n",
      "294 40 -0.07184292867452399\n",
      "295 40 -0.01358047889258751\n",
      "297 40 -0.02099114025121382\n",
      "298 40 0.01942937615734774\n",
      "299 40 0.0364266755883253\n",
      "300 40 0.038395399686045\n",
      "301 40 0.04868813712992899\n",
      "302 40 -0.005580870407972266\n",
      "303 40 -0.001410954896511607\n",
      "305 40 -0.004762777153355645\n",
      "306 40 -0.0017373413444901342\n",
      "307 40 -0.05002278442490118\n",
      "308 40 -0.02405857151946199\n",
      "309 40 0.06450120477278025\n",
      "310 40 0.05207401268613665\n",
      "311 40 0.01134454819361084\n",
      "312 40 -0.038125843784950555\n",
      "313 40 0.044645724739242706\n",
      "314 40 -0.056465308887096236\n",
      "315 40 -0.0022516540602454476\n",
      "317 40 -0.07147478583474776\n",
      "318 40 0.007408187599377105\n",
      "319 40 -0.008549398733914682\n",
      "320 40 0.029045842865146422\n",
      "321 40 0.05317518348063521\n",
      "322 40 -0.031745680424667064\n",
      "323 40 -0.0012907094721377756\n",
      "325 40 -0.014487097838940899\n",
      "326 40 0.030717477820659568\n",
      "327 40 0.03678065812773683\n",
      "328 40 -0.032158673026511715\n",
      "329 40 0.014328448863371096\n",
      "330 40 0.015893470356336065\n",
      "331 40 -0.08378222184996613\n",
      "332 40 -0.0018733470167444006\n",
      "333 40 0.02488985709134852\n",
      "334 40 0.05464333004579347\n",
      "335 40 0.025352217373762816\n",
      "336 40 0.03994261774748923\n",
      "337 40 0.004788080693086212\n",
      "338 40 -0.07816332954954745\n",
      "339 40 -0.02340166934231553\n",
      "340 40 -0.02097315046202433\n",
      "341 40 -0.02152611884470433\n",
      "342 40 -0.0016969213058703914\n",
      "343 40 -0.07727057598570405\n",
      "344 40 -0.056698322513741614\n",
      "345 40 0.020251341942198946\n",
      "346 40 -0.027792437295654115\n",
      "347 40 0.03612420486541865\n",
      "348 40 -0.004869083918945893\n",
      "349 40 -0.027877509415826285\n",
      "350 40 -0.08067858216802443\n",
      "351 40 0.0750511182868685\n",
      "352 40 -0.02896219808717444\n",
      "353 40 0.07397800102845571\n",
      "354 40 0.012937606846387778\n",
      "355 40 0.020579493010476454\n",
      "356 40 -0.012849630973033785\n",
      "358 40 0.048797905050832494\n",
      "359 40 -0.03822132129507041\n",
      "360 40 -0.012911528029721555\n",
      "361 40 -0.08717151395987852\n",
      "362 40 -0.05645860913061138\n",
      "363 40 0.09168186485410679\n",
      "364 40 -0.03097094028969529\n",
      "365 40 -0.011147892390795245\n",
      "366 40 0.028474127440145776\n",
      "367 40 0.018457880454777937\n",
      "368 40 0.03402863010880723\n",
      "369 40 -0.014936770075228622\n",
      "370 40 0.0007536546749516995\n",
      "371 40 -0.07713167909431579\n",
      "372 40 -0.0386080129287031\n",
      "373 40 -0.03363132557968405\n",
      "374 40 -0.03085557969464552\n",
      "375 40 0.024555770293452534\n",
      "377 40 0.040480629036244845\n",
      "378 40 -0.02918226742353498\n",
      "379 40 0.05749978900865722\n",
      "381 40 -0.0654117332774502\n",
      "382 40 0.02557668621744081\n",
      "383 40 -0.05295342071878202\n",
      "384 40 -0.055512379248128275\n",
      "386 40 -0.007968094193257507\n",
      "387 40 0.006567661755554244\n",
      "388 40 0.03441280372260498\n",
      "389 40 0.002149862298872518\n",
      "390 40 0.005227530214446041\n",
      "391 40 -0.05474585358425751\n",
      "392 40 0.07136885968666057\n",
      "393 40 0.019368225522224992\n",
      "394 40 -0.05101711050527895\n",
      "395 40 0.07540281755095626\n",
      "396 40 0.009099215407797002\n",
      "397 40 0.054251146465918706\n",
      "398 40 -0.02803090461414731\n",
      "399 40 -0.18324960632211634\n",
      "400 40 -0.0806525181000494\n",
      "401 40 -0.005245605388019436\n",
      "402 40 0.0466715063771881\n",
      "403 40 -0.0030795225044729204\n",
      "404 40 0.016905457708313427\n",
      "405 40 -0.011109975030584928\n",
      "406 40 -0.023217999312431365\n",
      "407 40 0.14110065085052356\n",
      "408 40 -0.019430202543895086\n",
      "409 40 -0.07094495108994821\n",
      "410 40 0.021076297177002597\n",
      "411 40 0.034160074579779535\n",
      "412 40 -0.025203399778721818\n",
      "413 40 9.450284512356744e-05\n",
      "414 40 -0.05278020794304668\n",
      "415 40 -0.0016730711033396601\n",
      "416 40 0.04442234848262745\n",
      "417 40 0.024013596303205934\n",
      "418 40 -0.04647717663046898\n",
      "420 40 0.06372046092985695\n",
      "421 40 0.0006581285128649861\n",
      "422 40 -0.10736087819495718\n",
      "423 40 -0.06816721831351587\n",
      "424 40 -0.06818996889378752\n",
      "425 40 -0.0011694534384746325\n",
      "426 40 0.04607130826735074\n",
      "427 40 0.023461620986091038\n",
      "428 40 -0.012367942235670105\n",
      "429 40 -0.06110572233009439\n",
      "430 40 -0.023743286231473513\n",
      "431 40 -0.028286452402726953\n",
      "432 40 0.036511999177259065\n",
      "433 40 0.09315205791855244\n",
      "434 40 -0.029542608508099914\n",
      "436 40 -0.00053901805576443\n",
      "437 40 -0.060773723587585496\n",
      "438 40 -0.04720099727776461\n",
      "439 40 0.021467210714196595\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "440 40 -0.06743613820919774\n",
      "441 40 -0.009195163011121565\n",
      "442 40 0.023312744522300012\n",
      "443 40 -0.05729278465798866\n",
      "444 40 0.023792147102737898\n",
      "445 40 0.01151125702368363\n",
      "446 40 -0.03944359261005483\n",
      "447 40 -0.07686257158133264\n",
      "448 40 0.0588726061181716\n",
      "449 40 0.020135919383047034\n",
      "450 40 0.0015222652302049416\n",
      "451 40 0.016632768436345126\n",
      "452 40 -0.019882439068989954\n",
      "453 40 -0.025319815286932435\n",
      "454 40 0.04855264737148361\n",
      "455 40 -0.06702043063418388\n",
      "456 40 -0.0460939214004137\n",
      "457 40 0.013226900571752168\n",
      "458 40 0.03973652423168418\n",
      "459 40 0.014265063271607908\n",
      "460 40 0.06299215123171768\n",
      "462 40 -8.261678824368346e-05\n",
      "463 40 0.12956127744157642\n",
      "464 40 -0.01562539014631819\n",
      "465 40 -0.06880640599641781\n",
      "466 40 0.06937656867034898\n",
      "467 40 0.008903827587013902\n",
      "468 40 -0.05358014749027542\n",
      "469 40 -0.0692604616922677\n",
      "471 40 0.0047944087026721705\n",
      "472 40 0.05423905314660502\n",
      "473 40 -0.01236415801985162\n",
      "474 40 0.046064339485072284\n",
      "475 40 0.016536301149840976\n",
      "478 40 -0.009965466966008446\n",
      "481 40 0.018855570448605162\n",
      "482 40 0.014380222511975438\n",
      "484 40 0.04299110471858405\n",
      "485 40 -0.0019672537399201885\n",
      "486 40 0.008045246802062886\n",
      "491 40 -0.024523860474121768\n",
      "492 40 -0.0012724796360032598\n",
      "494 40 0.11289568921310952\n",
      "496 40 -0.04524853566073246\n",
      "498 40 0.03886510062829994\n",
      "499 40 -0.006294255051369492\n",
      "501 40 -0.010237792376654103\n",
      "503 40 0.10467429386656477\n",
      "504 40 -0.010157541158833014\n",
      "505 40 -0.1105858421176306\n",
      "507 40 -0.047562891472623825\n",
      "510 40 0.036379699738655576\n",
      "514 40 -0.028850259191608173\n",
      "515 40 -0.028416801345273145\n",
      "516 40 -0.025527310779151935\n",
      "518 40 -0.008359043064543725\n",
      "519 40 0.011412426831410588\n",
      "525 40 0.015171610419600101\n",
      "528 40 0.03100231983923622\n",
      "529 40 0.03725322764153423\n",
      "533 40 -0.07038179140633469\n",
      "534 40 -0.07896071205668256\n",
      "536 40 0.00045241812143398397\n",
      "539 40 -0.0034287560411042257\n",
      "541 40 -0.0058794984290708105\n",
      "542 40 0.002287498386710962\n",
      "543 40 -0.05033270266026384\n",
      "544 40 -0.04286240873875995\n",
      "546 40 0.043361322037760705\n",
      "547 40 0.0880896558047248\n",
      "548 40 -0.023729345269304303\n",
      "550 40 0.009851804652572687\n",
      "552 40 -0.07577518910539967\n",
      "559 40 0.03920360817354449\n",
      "561 40 0.030227246144618858\n",
      "565 40 0.08576895782663976\n",
      "566 40 0.07032993336664076\n",
      "567 40 -0.08040234404881572\n",
      "569 40 -0.027332412429129177\n",
      "571 40 0.036049711377535945\n",
      "573 40 -0.057072088898231864\n",
      "574 40 0.04051074997518017\n",
      "576 40 0.05669824263490135\n",
      "581 40 0.021651302357504475\n",
      "582 40 0.01875474030476328\n",
      "583 40 -0.058444602544313586\n",
      "584 40 0.03349241452302093\n",
      "585 40 0.06757773518662988\n",
      "588 40 0.09032795101514157\n",
      "589 40 -0.033643455720783165\n",
      "594 40 -0.0057114554719587905\n",
      "596 40 -0.02071983572654313\n",
      "597 40 -0.012864756316563622\n",
      "600 40 0.1129604279880159\n",
      "603 40 0.03612170474126762\n",
      "605 40 0.04035710493994342\n",
      "607 40 -0.07024547921033013\n",
      "611 40 0.006955500155553773\n",
      "615 40 -0.040402003468782734\n",
      "619 40 0.0008545264794708463\n",
      "620 40 0.044021022645246564\n",
      "621 40 -0.013856017723106708\n",
      "623 40 -0.002727473522966835\n",
      "625 40 0.015003533908019381\n",
      "626 40 0.011689009265653532\n",
      "628 40 -0.09841473513662877\n",
      "631 40 0.041735651571791925\n",
      "632 40 0.0349926233849012\n",
      "634 40 0.004132313102133206\n",
      "635 40 -0.04261008815622781\n",
      "640 40 -0.017295914741457356\n",
      "641 40 0.04366171576524809\n",
      "642 40 -0.05393964818540762\n",
      "644 40 0.04141566662835541\n",
      "645 40 0.03847162997384733\n",
      "646 40 0.030680941543167244\n",
      "650 40 0.0007037191756409766\n",
      "651 40 -0.018555564700418477\n",
      "654 40 0.030440112558179827\n",
      "657 40 -0.04105170158009625\n",
      "658 40 -0.03570731047306472\n",
      "659 40 0.05510751365792865\n",
      "660 40 0.027844310402794926\n",
      "661 40 -0.050874443182539766\n",
      "663 40 -0.053569385584736194\n",
      "664 40 -0.010708448458458104\n",
      "665 40 0.0936480990536877\n",
      "667 40 0.0299621610523239\n",
      "668 40 -0.031073411269331337\n",
      "669 40 -0.011207851113731838\n",
      "670 40 0.01186385430755072\n",
      "672 40 0.05574117452526729\n",
      "676 40 0.07292187252233813\n",
      "679 40 -0.020874652690900664\n",
      "680 40 -0.017399572563481826\n",
      "681 40 0.05496059911312706\n",
      "682 40 0.07052289276931513\n",
      "685 40 0.005629977708030071\n",
      "689 40 0.079341960061921\n",
      "692 40 0.011208114365249721\n",
      "696 40 0.04844576031837364\n",
      "697 40 -0.05356811842687472\n",
      "701 40 -0.05687568394085898\n",
      "702 40 0.012617888127157851\n",
      "703 40 0.04575705206785844\n",
      "704 40 0.033833818043895826\n",
      "706 40 -0.048619541830064464\n",
      "713 40 -0.05313498897291461\n",
      "714 40 -0.11404552817836282\n",
      "718 40 -0.01041863158126404\n",
      "719 40 0.07392258408372715\n",
      "720 40 -0.060938142145762854\n",
      "723 40 -0.0466434070332665\n",
      "724 40 -0.0056001164804791075\n",
      "725 40 -0.056513301986746076\n",
      "726 40 -0.03381584817844999\n",
      "728 40 -0.02181908591475998\n",
      "729 40 -0.008124760774954881\n",
      "734 40 -0.0027798072809703048\n",
      "737 40 0.08881478997991261\n",
      "738 40 0.0047809089022642585\n",
      "739 40 0.02900611381813023\n",
      "747 40 0.002162734650184306\n",
      "750 40 0.014699509523261961\n",
      "751 40 -0.07829378061298234\n",
      "752 40 -0.017356280671728643\n",
      "753 40 -0.049987428925485286\n",
      "759 40 -0.004348076725147256\n",
      "760 40 -0.08977912358008856\n",
      "762 40 0.008046430957745862\n",
      "764 40 0.07566922756669194\n",
      "767 40 0.0011771882730244488\n",
      "769 40 -0.0008959480274540333\n",
      "772 40 -0.0049136984540650045\n",
      "774 40 0.10269255750371001\n",
      "778 40 -0.11675601594093706\n",
      "780 40 0.022076740525802253\n",
      "783 40 0.006382384868604642\n",
      "784 40 0.09703048948186661\n",
      "785 40 -0.04047268465392549\n",
      "787 40 -0.010869703890231988\n",
      "791 40 -0.05712299199567232\n",
      "795 40 -0.0050639820422909805\n",
      "796 40 -0.013933215923926785\n",
      "797 40 0.008003682595733076\n",
      "799 40 0.052528337218434015\n",
      "800 40 0.013103985130638356\n",
      "807 40 -0.04624940839194815\n",
      "809 40 -0.040674844732858075\n",
      "810 40 0.049698755962537214\n",
      "812 40 0.018795883376742383\n",
      "813 40 0.06544345905406931\n",
      "815 40 -0.051114261376438354\n",
      "816 40 -0.004806940183226213\n",
      "819 40 -0.00030937779061739333\n",
      "820 40 -0.023622586280564774\n",
      "821 40 -0.00546598254349453\n",
      "822 40 0.03334290440058039\n",
      "825 40 0.03177756046884319\n",
      "826 40 -0.0003993592335298127\n",
      "828 40 0.038304158700417215\n",
      "831 40 0.02512963992211929\n",
      "833 40 -0.0037281308016026914\n",
      "834 40 0.07513228915052553\n",
      "838 40 -0.06729127838034317\n",
      "840 40 -0.0018020960406960774\n",
      "842 40 0.02040217140826481\n",
      "846 40 -0.011908920351865799\n",
      "848 40 -0.029843563379020138\n",
      "851 40 0.0629740147773062\n",
      "854 40 0.07385253538088246\n",
      "857 40 0.0785875696357193\n",
      "861 40 0.027667208866273524\n",
      "862 40 0.0030665319299661457\n",
      "864 40 -0.03524822274142826\n",
      "865 40 0.05535048414921031\n",
      "866 40 0.015431347362899295\n",
      "868 40 -0.009184140086495285\n",
      "870 40 -0.03406287627194763\n",
      "872 40 0.012535963182923654\n",
      "873 40 0.08353378874057782\n",
      "877 40 0.043906073568026824\n",
      "878 40 0.008201282301342\n",
      "881 40 -0.05962843785601958\n",
      "882 40 0.05551950058878826\n",
      "883 40 0.03793541551273166\n",
      "888 40 -0.017898937711833075\n",
      "889 40 -0.039281259007045245\n",
      "893 40 0.09405790844443662\n",
      "895 40 -0.0010692734992622786\n",
      "897 40 0.02467673705731355\n",
      "899 40 -0.02544846469024274\n",
      "902 40 0.08934845796121102\n",
      "904 40 0.08421459869381473\n",
      "906 40 -0.04743864843838346\n",
      "907 40 0.0097494062851121\n",
      "912 40 0.0038291307038488655\n",
      "913 40 0.10175493707442537\n",
      "916 40 -0.02199042755004333\n",
      "919 40 0.017216252560876905\n",
      "920 40 0.1261192643000901\n",
      "921 40 -0.04177569591467685\n",
      "922 40 -0.03882849156472234\n",
      "926 40 0.046142786369129246\n",
      "927 40 -0.07234160999464719\n",
      "928 40 0.033023114196129466\n",
      "929 40 0.12229901276873364\n",
      "930 40 0.06207121581377112\n",
      "936 40 0.04226711563663819\n",
      "939 40 0.03358335841497238\n",
      "940 40 -0.023161390915422336\n",
      "942 40 0.01623044615019808\n",
      "944 40 0.015246960640365612\n",
      "946 40 0.024710353932932735\n",
      "948 40 0.024600928725085673\n",
      "950 40 0.011789608021119563\n",
      "956 40 -0.07294056013772268\n",
      "958 40 0.013999148760606414\n",
      "959 40 0.025968203298930976\n",
      "960 40 -0.04106791848910837\n",
      "964 40 0.030227100311885226\n",
      "966 40 -0.0025160760451735215\n",
      "967 40 0.019959830841711476\n",
      "969 40 0.07217254312273327\n",
      "970 40 -0.07568197775572184\n",
      "971 40 -0.06042422669500318\n",
      "975 40 0.0277898424164008\n",
      "979 40 -0.0005862154092782762\n",
      "980 40 0.10766998968887682\n",
      "983 40 0.07628316510770575\n",
      "984 40 -0.050655752196984614\n",
      "985 40 0.021081021083462836\n",
      "987 40 0.09228863226217485\n",
      "990 40 0.05898875256331616\n",
      "993 40 0.04276817736369534\n",
      "994 40 -0.01195621665692263\n",
      "997 40 0.04122881230968115\n",
      "998 40 0.018858527316947593\n",
      "999 40 -0.06360984662553812\n",
      "1000 40 0.04467270227323979\n",
      "1004 40 -0.03763333247496268\n",
      "1006 40 -0.006011847234455181\n",
      "1007 40 -0.09638553416001483\n",
      "1009 40 -0.051920398815180124\n",
      "1010 40 0.006828846676080533\n",
      "1016 40 0.036411810917735404\n",
      "1017 40 0.031693876678134024\n",
      "1018 40 0.010252074912456327\n",
      "1023 40 -0.028739621326261178\n",
      "1024 40 -0.039736022816877846\n",
      "1026 40 -0.021778267189312334\n",
      "1027 40 0.09320286122085544\n",
      "1029 40 -0.08531225297234639\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1030 40 -0.031758061233809955\n",
      "1033 40 -0.014110032613049264\n",
      "1036 40 0.009781264514843836\n",
      "1037 40 0.012882882130231883\n",
      "1039 40 0.02284684432592391\n",
      "1040 40 0.024398979247681033\n",
      "1043 40 0.009795231660877599\n",
      "1044 40 0.06545529497540618\n",
      "1045 40 -0.024143016177347022\n",
      "1047 40 0.014436296444996647\n",
      "1052 40 -0.0766211014372089\n",
      "1057 40 -0.014390421846686246\n",
      "1059 40 -0.023760845874220095\n",
      "1062 40 -0.012182514004618084\n",
      "1063 40 0.03894661705088432\n",
      "1067 40 0.08244790122586962\n",
      "1069 40 0.039731302821056934\n",
      "1071 40 -0.018377637306774365\n",
      "1072 40 -0.11394575501306412\n",
      "1073 40 -0.08886433496950766\n",
      "1075 40 -0.0003162538057510683\n",
      "1076 40 0.02131059215492174\n",
      "1077 40 0.04647988910395939\n",
      "1080 40 -0.037669466908451986\n",
      "1084 40 -0.04487531174583057\n",
      "1087 40 0.03468346393346273\n",
      "1090 40 0.10422992364597719\n",
      "1091 40 -0.02473286578623598\n",
      "1092 40 -0.007600060344033155\n",
      "1094 40 0.028707401126480396\n",
      "1098 40 0.07810633027386878\n",
      "1099 40 0.02315402484803359\n",
      "1100 40 -0.009550040040972804\n",
      "1102 40 0.04585784607870057\n",
      "1104 40 0.002125588085458151\n",
      "1107 40 -0.03315699338799823\n",
      "1108 40 -0.014537315602901252\n",
      "1110 40 -0.006140492226164052\n",
      "1111 40 -0.015967072716869396\n",
      "1113 40 0.056496540857330316\n",
      "1117 40 -0.026529782162379167\n",
      "1120 40 -0.029075280838543827\n",
      "1122 40 -0.03955547808623568\n",
      "1124 40 -0.03437501726087668\n",
      "1125 40 -0.08400096391618932\n",
      "1126 40 -0.00459368682312244\n",
      "1127 40 -0.029344718915553993\n",
      "1132 40 -0.04198410639528631\n",
      "1133 40 -0.021724130096144722\n",
      "1134 40 0.06457420598867115\n",
      "1140 40 0.00034889711465416055\n",
      "1141 40 0.06720875290669696\n",
      "1142 40 -0.04649491400469184\n",
      "1148 40 -0.12786217875451442\n",
      "1149 40 -0.03136605899075097\n",
      "1150 40 -0.025389881255498035\n",
      "1151 40 0.06509417531124265\n",
      "1154 40 -0.029239774688839183\n",
      "1156 40 -0.03464739723955035\n",
      "1157 40 0.14766548275423924\n",
      "1159 40 -0.06917930965577235\n",
      "1160 40 0.010712176603421579\n",
      "1161 40 -0.02215234016710081\n",
      "1163 40 -0.045010443992825375\n",
      "1166 40 -0.07191023281265038\n",
      "1172 40 -0.021686032949620987\n",
      "1173 40 -0.028589649105814647\n",
      "1175 40 0.07776309561139624\n",
      "1179 40 0.011865818430864964\n",
      "1181 40 0.03180625700362756\n",
      "1182 40 -0.026643973110975726\n",
      "1183 40 0.005413036347081362\n",
      "1186 40 -0.01393700228052292\n",
      "1188 40 0.0016156781503625733\n",
      "1190 40 0.029733395527602718\n",
      "1191 40 0.06863225271248709\n",
      "1192 40 0.030750519539174175\n",
      "1196 40 0.0009375580392976645\n",
      "1197 40 0.08193186822573584\n",
      "1202 40 0.03669089680480934\n",
      "1205 40 -0.022943679595691914\n",
      "1207 40 -0.024328734970148744\n",
      "1210 40 -0.020310768859997986\n",
      "1211 40 -0.017574059057585707\n",
      "1214 40 -0.04621116864486719\n",
      "1216 40 -0.01309124630092125\n",
      "1218 40 -0.028839369956994994\n",
      "1222 40 0.059973592223369974\n",
      "1223 40 -0.11229209586623053\n",
      "1224 40 -0.04194012655211131\n",
      "1225 40 -0.0172631990030211\n",
      "1226 40 -0.032987438992127124\n",
      "1227 40 -0.005343861054694425\n",
      "1232 40 -0.057190250329869706\n",
      "1236 40 0.05024507551695393\n",
      "1238 40 0.02541847488807797\n",
      "1239 40 0.003170542315209096\n",
      "1240 40 -0.049710355561635486\n",
      "1242 40 0.05570300741362509\n",
      "1243 40 0.038411640938272776\n",
      "1245 40 -0.016680904510877052\n",
      "1250 40 -0.03812426156615364\n",
      "1251 40 -0.027658311255216828\n",
      "1252 40 -0.033458937524139046\n",
      "1255 40 0.0554457977178753\n",
      "1256 40 -0.02846152220422174\n",
      "1258 40 0.014474693364855523\n",
      "1260 40 -0.009857440874606428\n",
      "1264 40 0.06883366497299385\n",
      "1267 40 0.053991037360988\n",
      "1269 40 0.034989761453348214\n",
      "1271 40 -0.037782080353994156\n",
      "1272 40 -0.05547484719580451\n",
      "1273 40 -0.00651863680978107\n",
      "1275 40 -0.04442717760983843\n",
      "1277 40 -0.032230823769050024\n",
      "1283 40 -0.08287146857414786\n",
      "1286 40 0.023366830263228156\n",
      "1287 40 0.009474450225716741\n",
      "1288 40 0.01196756329314716\n",
      "1289 40 0.033024525531497165\n",
      "1290 40 -0.06728846434629959\n",
      "1295 40 0.03977012468560117\n",
      "1297 40 0.010818810487208997\n",
      "1300 40 0.013222287220816614\n",
      "1302 40 -0.047120699633065435\n",
      "1304 40 0.014580401916326502\n",
      "1306 40 -0.008272361514639514\n",
      "1307 40 0.06645813685993371\n",
      "1309 40 0.042794614729253125\n",
      "1310 40 0.03229011753775175\n",
      "1311 40 0.06991290335614367\n",
      "1315 40 -0.0033982086430860868\n",
      "1316 40 0.05679619158598935\n",
      "1318 40 0.04638033143007715\n",
      "1319 40 -0.0020675293875602185\n",
      "1323 40 -0.0052994950379071926\n",
      "1326 40 0.0425791849291448\n",
      "1327 40 0.009614727277381427\n",
      "1329 40 -0.011824507012285271\n",
      "1331 40 0.05371409342365676\n",
      "1334 40 0.018335435117085463\n",
      "1335 40 0.0671099757068965\n",
      "1336 40 -0.0451099384078404\n",
      "1337 40 0.002722857450490959\n",
      "1338 40 -0.03199397397679585\n",
      "1341 40 0.03656577689195352\n",
      "1344 40 -0.06214876873901807\n",
      "1345 40 -0.011905431178862048\n",
      "1346 40 0.05603636490757744\n",
      "1347 40 0.007972454272611649\n",
      "1349 40 0.034143045007683004\n",
      "1350 40 -0.003336690973660533\n",
      "1352 40 0.014980305855534526\n",
      "1353 40 -0.05456474740660731\n",
      "1356 40 -0.002315184279119592\n",
      "1359 40 -0.024184172568589117\n",
      "1361 40 0.05195276128441691\n",
      "1362 40 -0.04386750367111435\n",
      "1365 40 -0.012163865076190794\n",
      "1366 40 -0.004170865859100198\n",
      "1368 40 0.07273595514954287\n",
      "1369 40 -0.06975841770000431\n",
      "1374 40 0.007337086115885511\n",
      "1375 40 -0.08412887562848172\n",
      "1377 40 0.02203399722901238\n",
      "1380 40 0.019953312060802156\n",
      "1386 40 -0.017205797248047612\n",
      "1387 40 -0.010878871588584107\n",
      "1388 40 0.01732670847432289\n",
      "1389 40 -0.02588384412725292\n",
      "1392 40 0.008629935961194027\n",
      "1394 40 0.0433499392869882\n",
      "1396 40 -0.008782075698454562\n",
      "1398 40 0.03836903758864635\n",
      "1404 40 -0.010986457611542511\n",
      "1405 40 0.04012750128878025\n",
      "1409 40 -0.09660656279752848\n",
      "1410 40 0.05671003553641146\n",
      "1411 40 0.016396339691820645\n",
      "1414 40 -0.0064824214727908875\n",
      "1415 40 -0.002967877751342887\n",
      "1419 40 0.019768249564778854\n",
      "1420 40 -0.02200665958541153\n",
      "1421 40 -0.001835707001998904\n",
      "1424 40 -0.0710883457576333\n",
      "1426 40 0.10731025694146523\n",
      "1427 40 -0.0393259473853925\n",
      "1428 40 0.11320306299340126\n",
      "1434 40 0.0009096739105386497\n",
      "1436 40 -0.016706482867782566\n",
      "1441 40 0.030342935535645054\n",
      "1442 40 -0.05354912610468282\n",
      "1443 40 -0.005942897567788308\n",
      "1444 40 -0.011447278136668926\n",
      "1446 40 0.02565235540568441\n",
      "1447 40 -0.03321500715592544\n",
      "1448 40 -0.07630612277937776\n",
      "1449 40 -0.025412573579602936\n",
      "1454 40 -0.06270058870555043\n",
      "1456 40 0.07282492096904734\n",
      "1458 40 -0.07521365981392894\n",
      "1461 40 -0.03658396914101516\n",
      "1465 40 0.024886535460862714\n",
      "1467 40 0.03566037707103531\n",
      "1470 40 0.01889191845597594\n",
      "1471 40 0.10391591114094698\n",
      "1472 40 -0.08167292988125127\n",
      "1474 40 0.03637490659714833\n",
      "1477 40 -0.005962116209887655\n",
      "1480 40 -0.08629279723222086\n",
      "1481 40 0.06296541478429925\n",
      "1483 40 0.07673839266378778\n",
      "1484 40 0.03668193552784936\n",
      "1486 40 -0.09552412407560393\n",
      "1489 40 0.002105001157743236\n",
      "1490 40 0.015133314510621037\n",
      "1494 40 -0.06110330857715489\n",
      "1495 40 0.01038840141266204\n",
      "1497 40 0.0730676937506195\n",
      "1500 40 0.0013545291517103792\n",
      "1501 40 0.06891219090148606\n",
      "1506 40 -0.030713562253422023\n",
      "1510 40 -1.918159753159232e-05\n",
      "1511 40 -0.0025156830092044726\n",
      "1513 40 0.10333728348931503\n",
      "1514 40 0.0574343499059911\n",
      "1515 40 0.07906353197370407\n",
      "1516 40 0.04703432915947262\n",
      "1522 40 -0.09166142522320914\n",
      "1524 40 -0.0646758480668848\n",
      "1528 40 -0.0243834165415001\n",
      "1531 40 8.782819349733018e-05\n",
      "1533 40 0.04333131540845903\n",
      "1534 40 0.03581324420929991\n",
      "1535 40 0.0021949680734089845\n",
      "1537 40 0.015735178791360514\n",
      "1538 40 0.04070740996326905\n",
      "1540 40 0.012371622958777551\n",
      "1543 40 0.03058860974832428\n",
      "1546 40 -0.008765571886299024\n",
      "1548 40 0.028819347084074465\n",
      "1550 40 -0.0827761123112086\n",
      "1551 40 0.042058954175122586\n",
      "1552 40 -0.07891972474323848\n",
      "1554 40 0.028326332030488337\n",
      "1556 40 -0.02157015143709899\n",
      "1559 40 0.07292724133321869\n",
      "1560 40 0.04974279288109804\n",
      "1561 40 0.03596775634096688\n",
      "1562 40 0.0751810277373955\n",
      "1563 40 0.011793325610537864\n",
      "1568 40 -0.07079164285297496\n",
      "1570 40 -0.012009206979258204\n",
      "1575 40 -0.09892446709417466\n",
      "1579 40 0.05814453688707557\n",
      "1580 40 0.03423406811547571\n",
      "1583 40 -0.046935311180399515\n",
      "1585 40 0.00024893664757617005\n",
      "1586 40 -0.004933925544600343\n",
      "1587 40 -0.0031369065282134123\n",
      "1590 40 0.022074418781402892\n",
      "1593 40 -0.02322015356587704\n",
      "1595 40 -0.03394271857802073\n",
      "1596 40 -0.0045721964704199865\n",
      "1599 40 -0.008700242890249964\n",
      "1600 40 0.053561989441690126\n",
      "1605 40 0.015090889939406354\n",
      "1606 40 -0.09337898055656063\n",
      "1608 40 -0.04080940367504121\n",
      "1611 40 0.0006737183086862261\n",
      "1612 40 0.0702054904791628\n",
      "1614 40 0.008069713062210493\n",
      "1615 40 -0.031057716400325223\n",
      "1616 40 0.024189094626971802\n",
      "1617 40 -0.030803447147729913\n",
      "1620 40 0.07889905483166659\n",
      "1624 40 -0.03339002325866271\n",
      "1625 40 -0.07211505962170414\n",
      "1627 40 0.05883172692587052\n",
      "1628 40 0.017562781947364405\n",
      "1629 40 0.11386730842361051\n",
      "1630 40 -0.0038967872198789944\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1631 40 0.036299830163608375\n",
      "1632 40 0.02659268641045155\n",
      "1633 40 0.009348387096172394\n",
      "1641 40 -0.05252608265786864\n",
      "1645 40 -0.02708599318874253\n",
      "1650 40 -0.00933537963689188\n",
      "1651 40 0.013642218486351346\n",
      "1653 40 0.011991073368422122\n",
      "1656 40 0.04353107504053173\n",
      "1658 40 -0.0832297406912309\n",
      "1659 40 0.005257340666553362\n",
      "1660 40 0.0021382135303052107\n",
      "1663 40 -0.02349762157060211\n",
      "1664 40 -0.00976839926016664\n",
      "1667 40 -0.028117912160826496\n",
      "1668 40 -0.026300650805048575\n",
      "1670 40 -0.07265894604039026\n",
      "1672 40 0.03299911609252349\n",
      "1677 40 -0.052472164308533784\n",
      "1678 40 0.0017358401933430245\n",
      "1679 40 -0.025039655790115238\n",
      "1683 40 -0.004409746967479103\n",
      "1684 40 0.04884354410568435\n",
      "1686 40 -0.01797790568985748\n",
      "1688 40 -0.06065053751526841\n",
      "1690 40 0.03545865803229266\n",
      "1691 40 0.010082415305459749\n",
      "1695 40 0.0018472673063612444\n",
      "1696 40 -0.03294358261691506\n",
      "1697 40 0.05012088512107582\n",
      "1707 40 0.06288520179278012\n",
      "1708 40 0.03373910982231647\n",
      "1710 40 -0.019528718651255064\n",
      "1711 40 0.004268322992866431\n",
      "1713 40 -0.09372197808194405\n",
      "1714 40 -0.030342505885460676\n",
      "1717 40 0.0026361529444087262\n",
      "1718 40 -0.054699305632478226\n",
      "1722 40 -0.034533513771573356\n",
      "1723 40 -0.07167774516780877\n",
      "1727 40 -0.062416616031239006\n",
      "1728 40 0.0313989743278066\n",
      "1731 40 0.05113272220758951\n",
      "1733 40 -0.014954572399046018\n",
      "1735 40 -0.02260435644390349\n",
      "1737 40 -0.07315553391729299\n",
      "1738 40 0.03241029809585334\n",
      "1740 40 0.03078262016807386\n",
      "1742 40 -0.015500204042610844\n",
      "1743 40 0.04526714664587178\n",
      "1745 40 0.028385144664979968\n",
      "1746 40 -0.04198495338280585\n",
      "1748 40 0.011317418789010941\n",
      "1754 40 0.07814921952585734\n",
      "1755 40 0.08390874435898646\n",
      "1756 40 0.043488981189854926\n",
      "1758 40 -0.04980253542716452\n",
      "1763 40 -0.045432104653717796\n",
      "1766 40 -0.04976285583608962\n",
      "1767 40 -0.03994990594384011\n",
      "1768 40 -0.0019644790073646947\n",
      "1770 40 0.0014854132744266252\n",
      "1771 40 -0.011545217113049927\n",
      "1774 40 0.014297218884651592\n",
      "1777 40 -0.014320702080704734\n",
      "1778 40 -0.05679787183132211\n",
      "1780 40 0.0008916595030339036\n",
      "1784 40 0.004717342347833192\n",
      "1785 40 0.026008331816927445\n",
      "1788 40 0.029585781682681868\n",
      "1794 40 0.009158147618787943\n",
      "1795 40 0.015186644007395934\n",
      "1796 40 0.015411673606334853\n",
      "1798 40 0.028726211135292456\n",
      "1799 40 0.007816833724064522\n",
      "1801 40 -0.05509594786081928\n",
      "1807 40 -0.05003673523427484\n",
      "1808 40 0.04809232024646503\n",
      "1809 40 0.014973038032259023\n",
      "1811 40 0.0515181369385419\n",
      "1816 40 -0.040491739032426234\n",
      "1817 40 0.04523569275770326\n",
      "1821 40 -0.01061949843462331\n",
      "1822 40 0.013427157835362021\n",
      "1823 40 -0.038763253490679564\n",
      "1824 40 0.016162736868691997\n",
      "1827 40 0.03747717291735837\n",
      "1828 40 0.06823315153727447\n",
      "1829 40 0.05755606036021086\n",
      "1830 40 -0.03857578363559467\n",
      "1834 40 0.06351772809081195\n",
      "1836 40 0.09241052855515013\n",
      "1837 40 0.04209948161708067\n",
      "1838 40 0.0016396527213403094\n",
      "1839 40 0.018208276886461622\n",
      "1840 40 -0.07562636182887131\n",
      "1841 40 0.005985268119306159\n",
      "1843 40 -0.005540335383161404\n",
      "1845 40 0.006461629365610682\n",
      "1847 40 -0.06341548663902564\n",
      "1849 40 0.039483375508541266\n",
      "1851 40 -0.033414427923170044\n",
      "1852 40 0.046524565939137195\n",
      "1853 40 -0.0076937667118252544\n",
      "1854 40 -0.000737835068189667\n",
      "1856 40 -0.016907003559145616\n",
      "1860 40 -0.053854325427516295\n",
      "1863 40 -0.01808744875076611\n",
      "1864 40 0.004044079675466251\n",
      "1865 40 0.015919752267110364\n",
      "1871 40 -0.020750164129625624\n",
      "1872 40 -0.05402361364036484\n",
      "1875 40 0.0026301027878452483\n",
      "1878 40 0.04894175925426409\n",
      "1879 40 -0.03934291237317864\n",
      "1881 40 -0.06571328264347114\n",
      "1882 40 -0.011491831374892469\n",
      "1884 40 -0.03843040862321597\n",
      "1886 40 0.03947693387206519\n",
      "1887 40 -0.06110443934236348\n",
      "1890 40 -0.061393875064368816\n",
      "1891 40 -0.06173311244716473\n",
      "1892 40 0.06873175841763834\n",
      "1896 40 0.02491404796792627\n",
      "1898 40 0.08377293553717169\n",
      "1903 40 -0.04579705264153829\n",
      "1904 40 0.06414183400288745\n",
      "1906 40 0.004252453492426711\n",
      "1912 40 0.03671556808329114\n",
      "1916 40 -0.01372576475493891\n",
      "1917 40 -0.0034077873515125424\n",
      "1918 40 0.011447485437294142\n",
      "1919 40 -0.05299602152228493\n",
      "1924 40 0.07969652884975317\n",
      "1926 40 -0.010764746595535396\n",
      "1928 40 0.06300293180405023\n",
      "1929 40 0.01505812985046467\n",
      "1931 40 0.023738127885409615\n",
      "1935 40 0.05547722658617238\n",
      "1937 40 0.031411779646428974\n",
      "1939 40 0.011539954275063888\n",
      "1940 40 0.016861064486489007\n",
      "1944 40 0.006914435697164589\n",
      "1945 40 -0.043444597443468486\n",
      "1948 40 0.00849345646818784\n",
      "1949 40 0.03411512675938688\n",
      "1954 40 0.016405584119641325\n",
      "1955 40 0.00974477303269452\n",
      "1959 40 0.0671170193453101\n",
      "1960 40 0.05099099399438485\n",
      "1962 40 -0.036737304171046495\n",
      "1965 40 -0.03996336251968598\n",
      "1966 40 -0.03445080492924073\n",
      "1967 40 -0.06173129204438579\n",
      "1970 40 -0.05769830802619842\n",
      "1974 40 0.07980279442414208\n",
      "1975 40 0.025101172417508144\n",
      "1976 40 0.017065109641075375\n",
      "1977 40 0.06690024652476287\n",
      "1979 40 -0.03011272256032848\n",
      "1980 40 0.03941135121297994\n",
      "1982 40 0.07559772019834855\n",
      "1983 40 0.0737569714933392\n",
      "1984 40 0.0037190421287789876\n",
      "1986 40 -0.05748480063213592\n",
      "1989 40 -0.04032956487873087\n",
      "1994 40 -0.010229864011266849\n",
      "1998 40 0.08210315190268123\n",
      "1999 40 0.020687179700570945\n",
      "2000 40 -0.08585416679553412\n",
      "2001 40 -0.05862637398971158\n",
      "2002 40 0.0018162561340644243\n",
      "2004 40 -0.09949562541371998\n",
      "2007 40 -0.04806648888791585\n",
      "2019 40 0.03724841594307857\n",
      "2026 40 0.0944563761142022\n",
      "2032 40 0.0051272359240066845\n",
      "2037 40 0.019222317298522952\n",
      "2044 40 -0.02751700537100016\n",
      "2048 40 0.10377929694926877\n",
      "2049 40 0.02563343954691962\n",
      "2054 40 -0.05735072886209701\n",
      "2055 40 -0.01818140970260393\n",
      "2057 40 -0.015887315946529503\n",
      "2064 40 -0.04252537854638081\n",
      "2108 40 0.05645334077758626\n",
      "2117 40 -0.06259001163003933\n",
      "2126 40 0.01912675696003016\n",
      "2134 40 -0.07910276768439999\n",
      "2136 40 0.01349545663048769\n",
      "2139 40 -0.05900881304901388\n",
      "2143 40 -0.05998859239551635\n",
      "2147 40 -0.010200877268740154\n",
      "2149 40 -0.047917508991683816\n",
      "2152 40 0.03898338137777503\n",
      "2183 40 0.021881915563666355\n",
      "2188 40 0.01189953185743291\n",
      "2189 40 0.0314496301964224\n",
      "2193 40 -0.005901524936621813\n",
      "2196 40 0.010662323098959458\n",
      "2215 40 0.005262417481740738\n",
      "2218 40 -0.010519558163156811\n"
     ]
    }
   ],
   "source": [
    "#random pairwise spearmans\n",
    "imp.reload(data_cleaning)\n",
    "random_senses = list(understand_calibration.aoa_estimation)\n",
    "random.shuffle(random_senses)\n",
    "random_understand_calibration=understand_calibration\n",
    "random_understand_calibration['aoa_estimation'] = random_senses\n",
    "\n",
    "print('Random Understand Pairwise Spearmans')\n",
    "random_understand_pairwise_spearmans = data_cleaning.getPairwiseSpearmans(random_understand_calibration, \n",
    "                                                                   num_samples=40,\n",
    "                                                                  verbose=False)\n",
    "random_understand_pairwise_spearmans['question_group'] = 'understand'\n",
    "\n",
    "print(\"Random Say Pairwise Spearmans\")\n",
    "\n",
    "random_senses = list(say_calibration.aoa_estimation)\n",
    "random.shuffle(random_senses)\n",
    "random_say_calibration=say_calibration\n",
    "random_say_calibration['aoa_estimation'] = random_senses\n",
    "\n",
    "random_say_pairwise_spearmans = data_cleaning.getPairwiseSpearmans(random_say_calibration,\n",
    "                                                            num_samples=40,\n",
    "                                                           verbose=False)\n",
    "\n",
    "random_say_pairwise_spearmans['question_group'] = 'say'\n",
    "\n",
    "random_pairwise_spearmans_df = pd.concat([random_understand_pairwise_spearmans,random_say_pairwise_spearmans])\n",
    "random_pairwise_spearmans_df.to_csv(\"../data/random_pairwise_spearmans_df.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "pairwise_spearmans_df = pd.read_csv(\"../data/pairwise_spearmans.csv\")\n",
    "random_pairwise_spearmans_df['type'] = 'random'\n",
    "pairwise_spearmans_df['type'] = 'actual'\n",
    "compare = pd.concat([random_pairwise_spearmans_df,pairwise_spearmans_df])\n",
    "\n",
    "%R -i compare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R -w 800 -h 400\n",
    "library(PNWColors)\n",
    "\n",
    "pairwise_spearmans_hist <- ggplot(compare, aes(x=mean_pairwise_spearmans, fill=type)) + \n",
    "                                geom_histogram(data=subset(compare,type == 'random'),binwidth=.05, \n",
    "                                               color='black',alpha=.75) + \n",
    "                                geom_histogram(data=subset(compare,type == 'actual'),binwidth=.05,\n",
    "                                               color='black',alpha=.75)+\n",
    "                                facet_wrap(~ question_group) +\n",
    "                                theme_light() + labs(x = \"Mean Spearmans\", y = \"Participant Count\",\n",
    "                                                       title =\"Mean Pairwise Spearmans\",\n",
    "                                                       subtitle = \"Against 30 Random Other Participants\")+\n",
    "                                theme(plot.title = element_text(size=14),\n",
    "                                      axis.title = element_text(size=14),\n",
    "                                      axis.text = element_text(size = 12),\n",
    "                                      strip.text = element_text(size=12),\n",
    "                                      legend.text=element_text(size=12),\n",
    "                                      legend.title=element_text(size=12),\n",
    "                                      strip.background = element_rect(\n",
    "                                          color=\"black\", fill=\"#00496f\", \n",
    "                                          size=.5, linetype=\"solid\"))\n",
    "pairwise_spearmans_hist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "random.shuffle(list(understand_calibration.aoa_estimation))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.031023784901757"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(pairwise_spearmans_df[pairwise_spearmans_df['mean_pairwise_spearmans']<.25])/len(pairwise_spearmans_df)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Drop Participants"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "participant_metrics_df = pd.merge(participant_metrics_df,\n",
    "         pairwise_spearmans_df,\n",
    "         left_on='participant_id',\n",
    "         right_on='participant_id',\n",
    "         how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 with mean calibration estimation > 25\n",
      "\n",
      "52 with sense calibration variance > 50\n",
      "\n",
      "10 with mean sense estimation > 25\n",
      "\n",
      "4 with mean sense estimation < 2\n",
      "\n",
      "24 with sense estimation variance <.5\n",
      "\n",
      "131 with sense estimation variance > 25\n",
      "\n",
      "194 with mean pairwise spearmans < .5\n",
      "\n",
      "54 had a duration < 5 minutes\n",
      "\n",
      "1618 participants remaining\n"
     ]
    }
   ],
   "source": [
    "#drop participants with a mean sense estimation > 25\n",
    "large_mean_calibration_estimation = list(participant_metrics_df[participant_metrics_df['mean_calibration']>25].participant_id)\n",
    "print(len(large_mean_calibration_estimation), \"with mean calibration estimation > 25\")\n",
    "print(\"\")\n",
    "\n",
    "large_mean_calibration_varience = list(participant_metrics_df[participant_metrics_df['calibration_varience']>50].participant_id)\n",
    "print(len(large_mean_calibration_varience), \"with sense calibration variance > 50\")\n",
    "print(\"\")\n",
    "\n",
    "large_mean_sense_estimation = list(participant_metrics_df[participant_metrics_df['mean_sense_estimation']>25].participant_id)\n",
    "print(len(large_mean_sense_estimation), \"with mean sense estimation > 25\")\n",
    "print(\"\")\n",
    "\n",
    "small_mean_sense_estimation = list(participant_metrics_df[participant_metrics_df['mean_sense_estimation']<2].participant_id)\n",
    "print(len(small_mean_sense_estimation), \"with mean sense estimation < 2\")\n",
    "print(\"\")\n",
    "\n",
    "low_sense_varience = list(participant_metrics_df[participant_metrics_df['sense_estimation_varience']<=.5].participant_id)\n",
    "print(len(low_sense_varience), \"with sense estimation variance <.5\")\n",
    "print(\"\")\n",
    "\n",
    "high_sense_varience = list(participant_metrics_df[participant_metrics_df['sense_estimation_varience']>25].participant_id)\n",
    "print(len(high_sense_varience), \"with sense estimation variance > 25\")\n",
    "print(\"\")\n",
    "\n",
    "low_spearmans = list(participant_metrics_df[participant_metrics_df['mean_pairwise_spearmans']<.25].participant_id)\n",
    "print(len(low_spearmans), \"with mean pairwise spearmans < .5\")\n",
    "print(\"\")\n",
    "\n",
    "participant_metrics_df['Duration (in seconds)'] = participant_metrics_df['Duration (in seconds)'].astype(int)\n",
    "low_duration = list(participant_metrics_df[participant_metrics_df['Duration (in seconds)']<300].participant_id)\n",
    "print(len(low_duration), 'had a duration < 5 minutes')\n",
    "print(\"\")\n",
    "\n",
    "final_drop_set = set(low_sense_varience+large_mean_sense_estimation+low_spearmans+\n",
    "                     large_mean_calibration_estimation+high_sense_varience+large_mean_calibration_varience)\n",
    "\n",
    "final_sense_survey = clean_sense_survey[~clean_sense_survey['participant_id'].isin(final_drop_set)]\n",
    "\n",
    "print(len(set(final_sense_survey.participant_id)), \"participants remaining\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "308"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set(low_spearmans) - set(failed_check+skipped_check))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "275"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set(failed_check+skipped_check)-set(low_spearmans))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "423"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(low_spearmans)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "390"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set(failed_check+skipped_check))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "115"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set(low_spearmans) & set(failed_check+skipped_check))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "650"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set(low_spearmans) | set(failed_one_check+skipped_one_check))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "67.79560408791824"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(final_sense_survey)/len(all_sense_estimation_df)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_sense_survey = pd.merge(final_sense_survey,\n",
    "                             participant_metrics_df[['participant_id','parent']],\n",
    "                             left_on='participant_id',\n",
    "                             right_on='participant_id',\n",
    "                             how='left')\n",
    "\n",
    "clean_sense_survey = pd.merge(clean_sense_survey,\n",
    "                             participant_metrics_df[['participant_id','parent']],\n",
    "                             left_on='participant_id',\n",
    "                             right_on='participant_id',\n",
    "                             how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>participant_id</th>\n",
       "      <th>sense_question</th>\n",
       "      <th>aoa_estimation</th>\n",
       "      <th>question_type</th>\n",
       "      <th>question_group</th>\n",
       "      <th>parent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  participant_id         sense_question  aoa_estimation question_type  \\\n",
       "0              7  cat calibration_say_1             2.0   calibration   \n",
       "\n",
       "  question_group parent  \n",
       "0            say     No  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_sense_survey.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Drop estimations where the estimation is > than 50\n",
    "%R -i final_sense_survey"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Saving 8.33 x 4.17 in image\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R -h 300 -w 600\n",
    "library(tidyverse)\n",
    "\n",
    "pal <- pnw_palette(\"Bay\",2, type = \"discrete\")\n",
    "color_scale <- scale_fill_manual(values=pal)\n",
    "\n",
    "sense_survey <- final_sense_survey %>% filter(question_type !='attention_check')\n",
    "\n",
    "estimation_dist <- ggplot(sense_survey, aes(x = aoa_estimation, fill = question_group)) + geom_histogram(binwidth=1,\n",
    "                                                                                      position = \"stack\",\n",
    "                                                                                     color='black') + \n",
    "theme_minimal()+color_scale + labs(title = \"Age of Acquisition Data Across All Senses\",\n",
    "                                  subtitle = \"After Dropping Participants\",\n",
    "                                  xlab='AoA Estimation',\n",
    "                                  ylab='Num Estimations')\n",
    "\n",
    "ggsave('figures/aoa_estimation_dist.png')\n",
    "estimation_dist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>participant_id</th>\n",
       "      <th>sense_question</th>\n",
       "      <th>aoa_estimation</th>\n",
       "      <th>question_type</th>\n",
       "      <th>question_group</th>\n",
       "      <th>parent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>2</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>2</td>\n",
       "      <td>candy calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    participant_id           sense_question  aoa_estimation question_type  \\\n",
       "116              2    cat calibration_say_1             3.0   calibration   \n",
       "117              2  candy calibration_say_1             3.0   calibration   \n",
       "\n",
       "    question_group parent  \n",
       "116            say     No  \n",
       "117            say     No  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_sense_survey.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "%R -i clean_sense_survey"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Saving 8.33 x 8.33 in image\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R -w 600 -h 600\n",
    "library(forcats)\n",
    "pal <- pnw_palette(\"Bay\",2, type = \"discrete\")\n",
    "color_scale <- scale_fill_manual(values=pal)\n",
    "\n",
    "calibration_senses <- clean_sense_survey %>% filter(question_type =='calibration') %>% filter(aoa_estimation < 100)\n",
    "\n",
    "calibration_before_exclusion <- ggplot(calibration_senses, aes(x = sense_question, \n",
    "                                      y=aoa_estimation, fill=parent)) + geom_boxplot() + coord_flip() + theme_minimal() +\n",
    "                                        labs(y = \"Estimated AoA\", x = \"Sense Question\", \n",
    "                                             title =\"Estimated AoA\",\n",
    "                                            subtitle = \"Before Excluding Participants (dropping tags < 50)\") +\n",
    "theme(plot.title = element_text(size=14),\n",
    "     axis.title = element_text(size=14),\n",
    "     axis.text = element_text(size = 12),\n",
    "      strip.text = element_text(size=12),\n",
    "      legend.text=element_text(size=12),\n",
    "     legend.title=element_text(size=12)) + stat_summary(fun.y = mean, color = \"#edd746\", position = position_dodge(0.75),\n",
    "             geom = \"point\", shape = 18, size = 2,\n",
    "             show.legend = FALSE) + color_scale\n",
    "\n",
    "ggsave('figures/calibration_before_exclusion.png')\n",
    "calibration_before_exclusion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Saving 8.33 x 8.33 in image\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R -w 600 -h 600\n",
    "library(forcats)\n",
    "\n",
    "calibration_senses <- final_sense_survey %>% filter(question_type =='calibration')\n",
    "\n",
    "calibration_after_exclusion <- ggplot(calibration_senses, aes(x = sense_question, \n",
    "                                      y=aoa_estimation, fill=parent)) + geom_boxplot() + coord_flip() + theme_minimal() +\n",
    "                                         labs(y = \"Estimated AoA\", x = \"Sense Question\", \n",
    "                                             title =\"Estimated AoA\",\n",
    "                                            subtitle = \"After Excluding Participants\") +\n",
    "theme(plot.title = element_text(size=14),\n",
    "     axis.title = element_text(size=14),\n",
    "     axis.text = element_text(size = 12),\n",
    "      strip.text = element_text(size=12),\n",
    "      legend.text=element_text(size=12),\n",
    "     legend.title=element_text(size=12)) +\n",
    "stat_summary(fun.y = mean, color = \"#edd746\", position = position_dodge(0.75),\n",
    "             geom = \"point\", shape = 18, size = 3,\n",
    "             show.legend = FALSE) + color_scale\n",
    "\n",
    "ggsave('figures/calibration_after_exclusion.png')\n",
    "calibration_after_exclusion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>participant_id</th>\n",
       "      <th>sense_question</th>\n",
       "      <th>aoa_estimation</th>\n",
       "      <th>question_type</th>\n",
       "      <th>question_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>candy calibration_say_1</td>\n",
       "      <td>11.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>bedroom calibration_say_1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  participant_id             sense_question  aoa_estimation question_type  \\\n",
       "0              1      cat calibration_say_1             8.0   calibration   \n",
       "1              1    candy calibration_say_1            11.0   calibration   \n",
       "2              1  bedroom calibration_say_1             7.0   calibration   \n",
       "\n",
       "  question_group  \n",
       "0            say  \n",
       "1            say  \n",
       "2            say  "
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_sense_estimation_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2441 origonal participants\n",
      "   -6 dropped no consent\n",
      "2435 participants consented\n",
      "   -210 dropped no data\n",
      "2225 participants provided data\n",
      "   -226 dropped poor attention\n",
      "1999 participants passed their attention checks\n",
      "   -65 dropped esl\n",
      "1934 participants before exclusions\n",
      "   -316 dropped poor metrics\n",
      "1618 partcipants after exclusions\n",
      "\n",
      "Keeping 1618/2435(66.45%) of consenting participants\n"
     ]
    }
   ],
   "source": [
    "og_part = raw_word_sense_text_entry_df[2:]\n",
    "consenting_part = raw_word_sense_text_entry_df[raw_word_sense_text_entry_df['Q3']=='I consent to participate in this study.']\n",
    "data_part = all_sense_estimation_df.participant_id\n",
    "attention_part = all_sense_estimation_df[~all_sense_estimation_df['participant_id'].isin(failed_one_check)].participant_id\n",
    "\n",
    "print(len(og_part), \"origonal participants\")\n",
    "print(f'   -{len(og_part)-len(consenting_part)} dropped no consent')\n",
    "print(len(consenting_part), 'participants consented')\n",
    "print(f'   -{len(consenting_part)-len(set(data_part))} dropped no data')\n",
    "print(len(set(data_part)), 'participants provided data')\n",
    "print(f'   -{len(set(data_part))-len(set(attention_part))} dropped poor attention')\n",
    "print(len(set(attention_part)), \"participants passed their attention checks\")\n",
    "print(f'   -{len(set(attention_part))-len(set(clean_sense_survey.participant_id))} dropped esl')\n",
    "\n",
    "print(len(set(clean_sense_survey.participant_id)), \"participants before exclusions\")\n",
    "print(f'   -{len(set(clean_sense_survey.participant_id))-len(set(final_sense_survey.participant_id))} dropped poor metrics')\n",
    "print(len(set(final_sense_survey.participant_id)), \"partcipants after exclusions\")\n",
    "print(f\"\\nKeeping {len(set(final_sense_survey.participant_id))}/{len(consenting_part)}({round(len(set(final_sense_survey.participant_id))/len(consenting_part)*100,2)}%) of consenting participants\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Look At Some Distributions of Tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>participant_id</th>\n",
       "      <th>sense_question</th>\n",
       "      <th>aoa_estimation</th>\n",
       "      <th>question_type</th>\n",
       "      <th>question_group</th>\n",
       "      <th>parent</th>\n",
       "      <th>word</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>2</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "      <td>No</td>\n",
       "      <td>cat calibration</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>2</td>\n",
       "      <td>candy calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "      <td>No</td>\n",
       "      <td>candy calibration</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>2</td>\n",
       "      <td>bedroom calibration_say_1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "      <td>No</td>\n",
       "      <td>bedroom calibration</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>2</td>\n",
       "      <td>leg calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "      <td>No</td>\n",
       "      <td>leg calibration</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>2</td>\n",
       "      <td>grandma calibration_say_1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>calibration</td>\n",
       "      <td>say</td>\n",
       "      <td>No</td>\n",
       "      <td>grandma calibration</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165182</th>\n",
       "      <td>2218</td>\n",
       "      <td>up adj_say_5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>say</td>\n",
       "      <td>Yes</td>\n",
       "      <td>up</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165183</th>\n",
       "      <td>2218</td>\n",
       "      <td>up adj_say_7</td>\n",
       "      <td>4.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>say</td>\n",
       "      <td>Yes</td>\n",
       "      <td>up</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165184</th>\n",
       "      <td>2218</td>\n",
       "      <td>say_check 1_1.3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>attention_check</td>\n",
       "      <td>attention</td>\n",
       "      <td>Yes</td>\n",
       "      <td>attention_check</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165185</th>\n",
       "      <td>2218</td>\n",
       "      <td>say_check 2_1.3</td>\n",
       "      <td>9.0</td>\n",
       "      <td>attention_check</td>\n",
       "      <td>attention</td>\n",
       "      <td>Yes</td>\n",
       "      <td>attention_check</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165186</th>\n",
       "      <td>2218</td>\n",
       "      <td>say_check 3_1.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>attention_check</td>\n",
       "      <td>attention</td>\n",
       "      <td>Yes</td>\n",
       "      <td>attention_check</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>138591 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       participant_id             sense_question  aoa_estimation  \\\n",
       "116                 2      cat calibration_say_1             3.0   \n",
       "117                 2    candy calibration_say_1             3.0   \n",
       "118                 2  bedroom calibration_say_1             6.0   \n",
       "119                 2      leg calibration_say_1             3.0   \n",
       "120                 2  grandma calibration_say_1             2.0   \n",
       "...               ...                        ...             ...   \n",
       "165182           2218               up adj_say_5             5.0   \n",
       "165183           2218               up adj_say_7             4.0   \n",
       "165184           2218            say_check 1_1.3             5.0   \n",
       "165185           2218            say_check 2_1.3             9.0   \n",
       "165186           2218            say_check 3_1.3             3.0   \n",
       "\n",
       "          question_type question_group parent                 word  \n",
       "116         calibration            say     No      cat calibration  \n",
       "117         calibration            say     No    candy calibration  \n",
       "118         calibration            say     No  bedroom calibration  \n",
       "119         calibration            say     No      leg calibration  \n",
       "120         calibration            say     No  grandma calibration  \n",
       "...                 ...            ...    ...                  ...  \n",
       "165182   sense_question            say    Yes                   up  \n",
       "165183   sense_question            say    Yes                   up  \n",
       "165184  attention_check      attention    Yes      attention_check  \n",
       "165185  attention_check      attention    Yes      attention_check  \n",
       "165186  attention_check      attention    Yes      attention_check  \n",
       "\n",
       "[138591 rows x 7 columns]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def getSenseWord(sense_question):\n",
    "    if 'check' in sense_question:\n",
    "        return 'attention_check'\n",
    "    elif 'calibration' in sense_question:\n",
    "        return sense_question.split(\" \")[0]+' '+'calibration'\n",
    "    else:\n",
    "        return sense_question.split(\" \")[0]\n",
    "    \n",
    "final_sense_survey['word'] = final_sense_survey.sense_question.apply(getSenseWord)\n",
    "final_sense_survey"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "random_calibration_word = list(final_sense_survey[final_sense_survey['question_type']=='calibration'].sample(1).word)[0]\n",
    "random_calibration_word\n",
    "random_sense_estimations = final_sense_survey[(final_sense_survey['question_type']=='calibration') &\n",
    "                                             (final_sense_survey['word']==random_calibration_word)]\n",
    "%R -i random_sense_estimations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R -w 800 -h 400\n",
    "\n",
    "ggplot(random_sense_estimations,aes(x = aoa_estimation, fill=parent)) + geom_histogram(binwidth = 1,color='black',position='stack') + \n",
    "    facet_wrap(~question_group)+\n",
    "    labs( x = \"Raw Reported Estimated AoA\", y='Participant Count',\n",
    "         title =\"Estimated AoA\",\n",
    "         subtitle=paste0(slice(random_sense_estimations,1)$word)) + \n",
    "    theme_light() + color_scale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x12b365c50>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 12 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "word_list = final_sense_survey[final_sense_survey['question_type']=='sense_question'].sense_question\n",
    "target_columns = random.sample(set(word_list), 16)\n",
    "\n",
    "fig, axes = plt.subplots(nrows=3, ncols=4, figsize = (14,8))\n",
    "fig.subplots_adjust(hspace=0.5)\n",
    "fig.suptitle('Various Distributions')\n",
    "\n",
    "for ax, sense in zip(axes.flatten(), target_columns):\n",
    "    ax.set_title(sense)\n",
    "    \n",
    "    aoa_estimations = final_sense_survey[final_sense_survey['sense_question']==sense]\n",
    "\n",
    "    parent_num_est = pd.to_numeric(aoa_estimations[(aoa_estimations['parent']=='Yes')].aoa_estimation)\n",
    "    \n",
    "    non_parent_num_est = pd.to_numeric(aoa_estimations[(aoa_estimations['parent']=='No')].aoa_estimation)\n",
    "    \n",
    "    #num_est = pd.to_numeric(aoa_estimations[~aoa_estimations[sense].isna()][sense])\n",
    "    ax.hist([parent_num_est, non_parent_num_est], bins=10,  histtype='bar', \n",
    "          stacked=True, label=['parents', 'non-parents'],align='left')\n",
    "    ax.set_ylim([0, 15])\n",
    "    ax.set(title=sense, xlabel='est years')\n",
    "    handles, labels = ax.get_legend_handles_labels()\n",
    "\n",
    "fig.legend(handles, labels, loc='lower center')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>participant_id</th>\n",
       "      <th>sense_question</th>\n",
       "      <th>aoa_estimation</th>\n",
       "      <th>question_type</th>\n",
       "      <th>question_group</th>\n",
       "      <th>parent</th>\n",
       "      <th>word</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>55284</th>\n",
       "      <td>622</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55754</th>\n",
       "      <td>627</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>13.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57201</th>\n",
       "      <td>643</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>No</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57770</th>\n",
       "      <td>649</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>4.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60126</th>\n",
       "      <td>675</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>No</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60969</th>\n",
       "      <td>684</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63577</th>\n",
       "      <td>712</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65194</th>\n",
       "      <td>730</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>13.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67506</th>\n",
       "      <td>754</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>6.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67621</th>\n",
       "      <td>755</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>8.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76681</th>\n",
       "      <td>875</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82308</th>\n",
       "      <td>951</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96142</th>\n",
       "      <td>1129</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116688</th>\n",
       "      <td>1384</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>7.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>No</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126917</th>\n",
       "      <td>1519</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136439</th>\n",
       "      <td>1647</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>6.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>153786</th>\n",
       "      <td>1888</td>\n",
       "      <td>wash v_understand_3</td>\n",
       "      <td>4.0</td>\n",
       "      <td>sense_question</td>\n",
       "      <td>understand</td>\n",
       "      <td>Yes</td>\n",
       "      <td>wash</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       participant_id       sense_question  aoa_estimation   question_type  \\\n",
       "55284             622  wash v_understand_3             2.0  sense_question   \n",
       "55754             627  wash v_understand_3            13.0  sense_question   \n",
       "57201             643  wash v_understand_3             5.0  sense_question   \n",
       "57770             649  wash v_understand_3             4.0  sense_question   \n",
       "60126             675  wash v_understand_3             5.0  sense_question   \n",
       "60969             684  wash v_understand_3             3.0  sense_question   \n",
       "63577             712  wash v_understand_3             2.0  sense_question   \n",
       "65194             730  wash v_understand_3            13.0  sense_question   \n",
       "67506             754  wash v_understand_3             6.0  sense_question   \n",
       "67621             755  wash v_understand_3             8.0  sense_question   \n",
       "76681             875  wash v_understand_3             3.0  sense_question   \n",
       "82308             951  wash v_understand_3             5.0  sense_question   \n",
       "96142            1129  wash v_understand_3             1.0  sense_question   \n",
       "116688           1384  wash v_understand_3             7.0  sense_question   \n",
       "126917           1519  wash v_understand_3             3.0  sense_question   \n",
       "136439           1647  wash v_understand_3             6.0  sense_question   \n",
       "153786           1888  wash v_understand_3             4.0  sense_question   \n",
       "\n",
       "       question_group parent  word  \n",
       "55284      understand    Yes  wash  \n",
       "55754      understand    Yes  wash  \n",
       "57201      understand     No  wash  \n",
       "57770      understand    Yes  wash  \n",
       "60126      understand     No  wash  \n",
       "60969      understand    Yes  wash  \n",
       "63577      understand    Yes  wash  \n",
       "65194      understand    Yes  wash  \n",
       "67506      understand    Yes  wash  \n",
       "67621      understand    Yes  wash  \n",
       "76681      understand    Yes  wash  \n",
       "82308      understand    Yes  wash  \n",
       "96142      understand    Yes  wash  \n",
       "116688     understand     No  wash  \n",
       "126917     understand    Yes  wash  \n",
       "136439     understand    Yes  wash  \n",
       "153786     understand    Yes  wash  "
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_sense_survey[final_sense_survey['sense_question']=='wash v_understand_3']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Norm Participants Based On Their Calibrations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Following homogonization from (Stadthagen-Gonzalez & Davis, 2006) ie the bristol norms\n",
    "\n",
    "\"estimate a mean bias for each person with respect to the group mean and subtract it\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.options.mode.chained_assignment = None\n",
    "participant_calibrations = final_sense_survey[\n",
    "                  (final_sense_survey['question_type']=='calibration')].rename(columns={'aoa_estimation':'participant_aoa_estimation'})\n",
    "\n",
    "mean_calibrations_df = final_sense_survey[final_sense_survey['question_type']=='calibration'].groupby(by='sense_question').agg('mean').reset_index().rename(columns={'aoa_estimation':'mean_aoa_estimation'})\n",
    "\n",
    "mean_to_estimation_df = pd.merge(participant_calibrations[['participant_id','sense_question','participant_aoa_estimation','question_group']],\n",
    "    mean_calibrations_df,\n",
    "        left_on='sense_question',\n",
    "        right_on='sense_question',\n",
    "        how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12b970490>"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAWEklEQVR4nO3dfYxc1X3G8e+DebPYCEMhK9d2u7RxWxmsOLCyiRJVs9DYhvxhqBIEQsQmRE4lWwqqVWFSRRBeJFeC0NIQ1E3tYvK2tZJQLGNKHYcV5Q+C7dRhsR3EFkzDyrGV2Bg2uFRLfv1jjtOpszszO56Znbvn+UijmXvuuXfOT3fnmTt37txVRGBmZnk4Y6oHYGZm7ePQNzPLiEPfzCwjDn0zs4w49M3MMnLmVA+gmosuuih6enqq9vnVr37Feeed154BtdF0rMs1FYNrKoZqNe3Zs+cXEXHxePM6OvR7enrYvXt31T6Dg4OUSqX2DKiNpmNdrqkYXFMxVKtJ0hsTLefDO2ZmGXHom5llxKFvZpYRh76ZWUYc+mZmGXHom5llxKFvZpYRh76ZWUYc+mZmGenoX+RacfSsf6pmn3ULxyi1fihmVoX39M3MMuLQNzPLiEPfzCwjPqZvVdVzrN7MiqPmnr6kcyW9KOknkvZJ+nJqf0zS65L2ptui1C5JD0salvSSpMsr1rVS0qvptrJ1ZZmZ2Xjq2dN/D7gqIkYlnQU8L+npNO+vIuK7p/S/BpifbkuAR4Elki4E7gJ6gQD2SNoaEceaUYiZmdVWc08/ykbT5FnpFlUWWQE8npZ7AZglaTawDNgREUdT0O8Alp/e8M3MbDIUUS2/UydpBrAH+BDwSETcIekx4KOUPwnsBNZHxHuStgEbIuL5tOxO4A6gBJwbEfel9i8BJyLigVOeazWwGqC7u/uKgYGBqmMbHR2lq6ur7oKLolPqGho53rR1dc+ED154ftPW1wk6ZTs1k2sqhmo19fX17YmI3vHm1fVFbkS8DyySNAt4QtJlwJ3Az4GzgX7KwX5PA2M/9bn60/ro7e2NWv/ibDr+GzTonLpWNfGL3HULx7ihA2pqpk7ZTs3kmoqh0ZomdcpmRLwFPAssj4hD6RDOe8A/AYtTtxFgXsVic1PbRO1mZtYm9Zy9c3Haw0fSTOATwE/TcXokCbgOeDktshX4TDqL50rgeEQcAp4Blkq6QNIFwNLUZmZmbVLP4Z3ZwOZ0XP8MYEtEbJP0Q0kXAwL2An+R+m8HrgWGgXeBWwEi4qike4Fdqd89EXG0eaWYmVktNUM/Il4CPjJO+1UT9A9gzQTzNgGbJjlGMzNrEl+GwcwsIw59M7OMOPTNzDLi0Dczy4hD38wsIw59M7OMOPTNzDLi0Dczy4hD38wsIw59M7OMOPTNzDLi0Dczy4hD38wsIw59M7OMOPTNzDLi0Dczy4hD38wsIw59M7OMOPTNzDJSM/QlnSvpRUk/kbRP0pdT+yWSfiRpWNI/Szo7tZ+TpofT/J6Kdd2Z2l+RtKxVRZmZ2fjq2dN/D7gqIj4MLAKWS7oS+BvgoYj4EHAMuC31vw04ltofSv2QtAC4EbgUWA58TdKMZhZjZmbV1Qz9KBtNk2elWwBXAd9N7ZuB69LjFWmaNP9qSUrtAxHxXkS8DgwDi5tShZmZ1aWuY/qSZkjaCxwBdgD/CbwVEWOpy5vAnPR4DvAzgDT/OPA7le3jLGNmZm1wZj2dIuJ9YJGkWcATwJ+0akCSVgOrAbq7uxkcHKzaf3R0tGafIuqUutYtHKvdqU7dM+mImpqpU7ZTM7mmYmi0prpC/6SIeEvSs8BHgVmSzkx783OBkdRtBJgHvCnpTOB84JcV7SdVLlP5HP1AP0Bvb2+USqWqYxocHKRWnyLqlLpWrX+qaetat3CMGzqgpmbqlO3UTK6pGBqtqZ6zdy5Oe/hImgl8AjgAPAt8KnVbCTyZHm9N06T5P4yISO03prN7LgHmAy9OesRmZtawevb0ZwOb05k2ZwBbImKbpP3AgKT7gP8ANqb+G4FvSBoGjlI+Y4eI2CdpC7AfGAPWpMNGZmbWJjVDPyJeAj4yTvtrjHP2TUT8N/DpCdZ1P3D/5IdpZmbN4F/kmpllxKFvZpYRh76ZWUYc+mZmGXHom5llxKFvZpYRh76ZWUYc+mZmGXHom5llxKFvZpYRh76ZWUYc+mZmGXHom5llxKFvZpYRh76ZWUYc+mZmGXHom5llxKFvZpYRh76ZWUbq+cfoZk3Ts/6puvod3PDJFo/ELE819/QlzZP0rKT9kvZJ+kJqv1vSiKS96XZtxTJ3ShqW9IqkZRXty1PbsKT1rSnJzMwmUs+e/hiwLiJ+LOkDwB5JO9K8hyLigcrOkhYANwKXAr8L/EDSH6XZjwCfAN4EdknaGhH7m1GImZnVVjP0I+IQcCg9fkfSAWBOlUVWAAMR8R7wuqRhYHGaNxwRrwFIGkh9HfpmZm2iiKi/s9QDPAdcBvwlsAp4G9hN+dPAMUlfBV6IiG+mZTYCT6dVLI+Iz6X2W4AlEbH2lOdYDawG6O7uvmJgYKDqmEZHR+nq6qq7hqLolLqGRo43bV3dM+Hwifr6LpxzftOet5U6ZTs1k2sqhmo19fX17YmI3vHm1f1FrqQu4HvA7RHxtqRHgXuBSPcPAp+d7MBPFRH9QD9Ab29vlEqlqv0HBwep1aeIOqWuVXV+8VqPdQvHeHCovj+5gzeXmva8rdQp26mZXFMxNFpTXa9ASWdRDvxvRcT3ASLicMX8rwPb0uQIMK9i8bmpjSrtZmbWBvWcvSNgI3AgIr5S0T67otv1wMvp8VbgRknnSLoEmA+8COwC5ku6RNLZlL/s3dqcMszMrB717Ol/DLgFGJK0N7V9EbhJ0iLKh3cOAp8HiIh9krZQ/oJ2DFgTEe8DSFoLPAPMADZFxL4m1mJmZjXUc/bO84DGmbW9yjL3A/eP07692nJmZtZavgyDmVlGHPpmZhlx6JuZZcShb2aWEYe+mVlGHPpmZhlx6JuZZcShb2aWEYe+mVlGHPpmZhlx6JuZZcShb2aWEYe+mVlGHPpmZhlx6JuZZcShb2aWEYe+mVlGHPpmZhlx6JuZZaRm6EuaJ+lZSfsl7ZP0hdR+oaQdkl5N9xekdkl6WNKwpJckXV6xrpWp/6uSVrauLDMzG089e/pjwLqIWABcCayRtABYD+yMiPnAzjQNcA0wP91WA49C+U0CuAtYAiwG7jr5RmFmZu1RM/Qj4lBE/Dg9fgc4AMwBVgCbU7fNwHXp8Qrg8Sh7AZglaTawDNgREUcj4hiwA1je1GrMzKwqRUT9naUe4DngMuC/ImJWahdwLCJmSdoGbIiI59O8ncAdQAk4NyLuS+1fAk5ExAOnPMdqyp8Q6O7uvmJgYKDqmEZHR+nq6qq7hqLolLqGRo43bV3dM+Hwifr6LpxzftOet5U6ZTs1k2sqhmo19fX17YmI3vHmnVnvE0jqAr4H3B4Rb5dzviwiQlL97x5VREQ/0A/Q29sbpVKpav/BwUFq9SmiTqlr1fqnmraudQvHeHCovj+5gzeXmva8rdQp26mZXFMxNFpTXWfvSDqLcuB/KyK+n5oPp8M2pPsjqX0EmFex+NzUNlG7mZm1ST1n7wjYCByIiK9UzNoKnDwDZyXwZEX7Z9JZPFcCxyPiEPAMsFTSBekL3KWpzczM2qSez9ofA24BhiTtTW1fBDYAWyTdBrwB3JDmbQeuBYaBd4FbASLiqKR7gV2p3z0RcbQpVZiZWV1qhn76QlYTzL56nP4BrJlgXZuATZMZoJmZNY9/kWtmlhGHvplZRhz6ZmYZceibmWXEoW9mlhGHvplZRhz6ZmYZceibmWXEoW9mlpG6r7Jp00tPE6+eaWbF4dC3jlTvm9LBDZ9s8UjMphcf3jEzy4hD38wsIw59M7OMOPTNzDLi0Dczy4hD38wsIw59M7OMOPTNzDLi0Dczy0jN0Je0SdIRSS9XtN0taUTS3nS7tmLenZKGJb0iaVlF+/LUNixpffNLMTOzWurZ038MWD5O+0MRsSjdtgNIWgDcCFyalvmapBmSZgCPANcAC4CbUl8zM2ujmtfeiYjnJPXUub4VwEBEvAe8LmkYWJzmDUfEawCSBlLf/ZMesZmZNUwRUbtTOfS3RcRlafpuYBXwNrAbWBcRxyR9FXghIr6Z+m0Enk6rWR4Rn0vttwBLImLtOM+1GlgN0N3dfcXAwEDVsY2OjtLV1VWzhqJpdV1DI8dbtu6JdM+Ewyeau86Fc85v7gonaTr+/bmmYqhWU19f356I6B1vXqNX2XwUuBeIdP8g8NkG1/X/REQ/0A/Q29sbpVKpav/BwUFq9SmiVte1agourbxu4RgPDjX3wq4Hby41dX2TNR3//lxTMTRaU0OvwIg4fPKxpK8D29LkCDCvouvc1EaVdjMza5OGTtmUNLti8nrg5Jk9W4EbJZ0j6RJgPvAisAuYL+kSSWdT/rJ3a+PDNjOzRtTc05f0HaAEXCTpTeAuoCRpEeXDOweBzwNExD5JWyh/QTsGrImI99N61gLPADOATRGxr+nVmJlZVfWcvXPTOM0bq/S/H7h/nPbtwPZJjc7MzJrKv8g1M8uIQ9/MLCMOfTOzjDj0zcwy4tA3M8uIQ9/MLCMOfTOzjDT3QihmbdYziWsIHdzwyRaOxKwYvKdvZpYRh76ZWUYc+mZmGXHom5llxKFvZpYRh76ZWUYc+mZmGXHom5llxKFvZpYRh76ZWUYc+mZmGakZ+pI2SToi6eWKtgsl7ZD0arq/ILVL0sOShiW9JOnyimVWpv6vSlrZmnLMzKyaevb0HwOWn9K2HtgZEfOBnWka4BpgfrqtBh6F8psEcBewBFgM3HXyjcLMzNqnZuhHxHPA0VOaVwCb0+PNwHUV7Y9H2QvALEmzgWXAjog4GhHHgB389huJmZm1mCKidiepB9gWEZel6bciYlZ6LOBYRMyStA3YEBHPp3k7gTuAEnBuRNyX2r8EnIiIB8Z5rtWUPyXQ3d19xcDAQNWxjY6O0tXVVVexRdLquoZGjrds3RPpngmHT7T9aX9j4Zzzm77O6fj355qKoVpNfX19eyKid7x5p309/YgISbXfOepfXz/QD9Db2xulUqlq/8HBQWr1KaJW17VqEtehb5Z1C8d4cGjq/oXDwZtLTV/ndPz7c03F0GhNjZ69czgdtiHdH0ntI8C8in5zU9tE7WZm1kaNhv5W4OQZOCuBJyvaP5PO4rkSOB4Rh4BngKWSLkhf4C5NbWZm1kY1P2tL+g7lY/IXSXqT8lk4G4Atkm4D3gBuSN23A9cCw8C7wK0AEXFU0r3ArtTvnog49cths5aq918r+t8q2nRWM/Qj4qYJZl09Tt8A1kywnk3ApkmNzszMmsq/yDUzy4hD38wsIw59M7OMOPTNzDLi0Dczy4hD38wsIw59M7OMOPTNzDLi0Dczy4hD38wsIw59M7OMOPTNzDIydf/Rwlqi3itJmlmevKdvZpYRh76ZWUYc+mZmGfExfbNT+D9s2XTmPX0zs4w49M3MMnJaoS/poKQhSXsl7U5tF0raIenVdH9BapekhyUNS3pJ0uXNKMDMzOrXjGP6fRHxi4rp9cDOiNggaX2avgO4BpifbkuAR9O91eBz782sWVpxeGcFsDk93gxcV9H+eJS9AMySNLsFz29mZhNQRDS+sPQ6cAwI4B8iol/SWxExK80XcCwiZknaBmyIiOfTvJ3AHRGx+5R1rgZWA3R3d18xMDBQdQyjo6N0dXU1XEOnqqxraOT4FI+mObpnwuETUz2K5lk45/xp+ffnmoqhWk19fX17IqJ3vHmne3jn4xExIumDwA5JP62cGREhaVLvKhHRD/QD9Pb2RqlUqtp/cHCQWn2KqLKuVdPk8M66hWM8ODR9zhI+eHNpWv79uaZiaLSm0zq8ExEj6f4I8ASwGDh88rBNuj+Suo8A8yoWn5vazMysTRre7ZJ0HnBGRLyTHi8F7gG2AiuBDen+ybTIVmCtpAHKX+Aej4hDpzN4s6nUs/4p1i0cq/lJzD/isk5yOp+1u4EnyoftORP4dkT8q6RdwBZJtwFvADek/tuBa4Fh4F3g1tN4bjMza0DDoR8RrwEfHqf9l8DV47QHsKbR5zMzs9PnX+SamWVk+pxKUUDVfnRVz7FiM7PJ8p6+mVlGHPpmZhlx6JuZZcTH9FvAF0gzs07lPX0zs4w49M3MMuLQNzPLiI/pT4KP1Vsj/I/WrZN4T9/MLCMOfTOzjDj0zcwy4tA3M8uIQ9/MLCM+e8esQ/gsH2sH7+mbmWXEoW9mlhEf3sE/urJi8WEgOx3e0zczy0jb9/QlLQf+DpgB/GNEbGj3GMxyMJlPsP5UkI+2hr6kGcAjwCeAN4FdkrZGxP52jsPMGuNDS8XX7j39xcBwRLwGIGkAWAG0JPR9rN6sPpWvlXULx1h1mq+dZr/2/CbSPIqI9j2Z9ClgeUR8Lk3fAiyJiLUVfVYDq9PkHwOv1FjtRcAvWjDcqTYd63JNxeCaiqFaTb8fERePN6Pjzt6JiH6gv97+knZHRG8LhzQlpmNdrqkYXFMxNFpTu8/eGQHmVUzPTW1mZtYG7Q79XcB8SZdIOhu4Edja5jGYmWWrrYd3ImJM0lrgGcqnbG6KiH2nudq6DwUVzHSsyzUVg2sqhoZqausXuWZmNrX8i1wzs4w49M3MMlLY0Jf0aUn7JP1aUu8p8+6UNCzpFUnLpmqMp0PS3ZJGJO1Nt2unekyNkrQ8bYthSeunejzNIOmgpKG0bXZP9XgaJWmTpCOSXq5ou1DSDkmvpvsLpnKMkzVBTYV+PUmaJ+lZSftT7n0htU96WxU29IGXgT8HnqtslLSA8llBlwLLga+lyz8U0UMRsSjdtk/1YBpRcemNa4AFwE1pG00HfWnbFPn878cov04qrQd2RsR8YGeaLpLH+O2aoNivpzFgXUQsAK4E1qTX0aS3VWFDPyIORMR4v9ZdAQxExHsR8TowTPnyDzY1fnPpjYj4H+DkpTesA0TEc8DRU5pXAJvT483AdW0d1GmaoKZCi4hDEfHj9Pgd4AAwhwa2VWFDv4o5wM8qpt9MbUW0VtJL6eNqoT5iV5hO26NSAP8maU+6dMh00h0Rh9LjnwPdUzmYJpoOryck9QAfAX5EA9uqo0Nf0g8kvTzObVrsKdao71HgD4FFwCHgwSkdrJ3q4xFxOeXDVmsk/elUD6gVonxO93Q4r3tavJ4kdQHfA26PiLcr59W7rTru2juVIuLPGlisMJd6qLc+SV8HtrV4OK1SmO0xGRExku6PSHqC8mGs56ovVRiHJc2OiEOSZgNHpnpApysiDp98XNTXk6SzKAf+tyLi+6l50tuqo/f0G7QVuFHSOZIuAeYDL07xmCYtbcCTrqf8xXURTbtLb0g6T9IHTj4GllLc7TOercDK9Hgl8OQUjqUpiv56kiRgI3AgIr5SMWvS26qwv8iVdD3w98DFwFvA3ohYlub9NfBZyt943x4RT0/ZQBsk6RuUP4oGcBD4fMWxu0JJp8f9Lf936Y37p3hIp0XSHwBPpMkzgW8XtSZJ3wFKlC/Texi4C/gXYAvwe8AbwA0RUZgvRieoqUSBX0+SPg78OzAE/Do1f5Hycf1JbavChr6ZmU3edDy8Y2ZmE3Dom5llxKFvZpYRh76ZWUYc+mZmGXHom5llxKFvZpaR/wVy9I9a698NUAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mean_to_estimation_df['offset'] = mean_to_estimation_df.participant_aoa_estimation - mean_to_estimation_df.mean_aoa_estimation\n",
    "mean_to_estimation_df.offset.hist(bins=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "random participant 1440\n",
      "Intercept = -2.7181523699284584\n",
      "Coeff = 1.37827520558923\n"
     ]
    }
   ],
   "source": [
    "#select a random participant\n",
    "rand_participant = list(participant_calibrations.sample(1).participant_id)[0]\n",
    "print('random participant', rand_participant)\n",
    "ind_part = mean_to_estimation_df[mean_to_estimation_df['participant_id']==rand_participant]\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "X = ind_part['mean_aoa_estimation'].values.reshape(-1,1)\n",
    "y = ind_part['participant_aoa_estimation'].values.reshape(-1,1)\n",
    "reg = LinearRegression()\n",
    "reg.fit(X, y)\n",
    "print(\"Intercept =\", reg.intercept_[0])\n",
    "print(\"Coeff =\",reg.coef_[0][0])\n",
    "\n",
    "ind_part.loc[:,'sub_intercept'] = ind_part.participant_aoa_estimation.apply(lambda est: est - reg.intercept_[0])\n",
    "ind_part.loc[:,'div_coeff'] = ind_part.sub_intercept.apply(lambda est: est/reg.coef_[0][0])\n",
    "\n",
    "%R -i ind_part"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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tutmwg8UKlQoMGbMmKxr27dvDxxyyCGBJk2aBM4666xApUqVAps3b866Hs+Dv/76y9aV+n7++edBRdG3xYoVs9eDLvj05/vvv7e4lCpVKvDrr7/mqdTzzz8/YJjgwJQpU/J0v96kCCgCioAikNoI5E0M5CM/efHFFwtSGz5IYNauXWslC0gH8kKrV6/Ouu0///mPTJgwIet/pIPXXntNWrVqFelyTM676xWa4X//+1/p3r27dOvWTYoWLRp62f5///33xUzmYa8htercubNUqFAh6Hrfvn2lU6dOgqTwgw8+EMMUyAMPPBCUJt5/Tj31VNu37nJmz55tpWnuc34ev/DCC3LppZfKaaedJkiyvNLGjRutZO6ee+6RsWPHer1d0ysCioAioAikAQJJz2CFYly+fHmpWLGi/Pzzz/bS1q1b5aqrrpKjjjrKbpvBkDHBQc8884z0799fjHRGatSoIVdeeaW9r3379nb7Zvz48ZZpsYnN10svvSRnnnmmHHHEEZYhIW+odevWdhuN/+Q1cuRIW4eTTjrJlmETma+c6vLcc8+JkTDZfGlDzZo1BUYCMpK6oHrZk66vNWvWyJ49e2TlypVSpkwZ15V/D7l23XXXBdXFnahPnz6WQTzhhBPcp8VI8rIYRyMZk2uuucYyW0GJwvx5/fXXBZzdNGzYMLnrrrvESM8sc0I9K1euLLfddpuwdRmJKPPll18Oujx16lRp27Zt0Ll169bZMsmXLV36yqG84u7cH/rLc2GklrYO4Rgk6te0aVMpV66cGMmjhDLH3N+oUSPp0KGDZVypu5IioAgoAopAhiGQzAI4tgi7du2aVcWffvop8PTTTweM/lXgu+++s+fNRBa49tprA4bhCmzatClw3nnnBTp27GivmUnfbosZvaTAK6+8EjD6RoFDDz008MYbbwTYojLSmkCzZs1s2gULFgTMhGm3An/55ZfA9ddfHzCTv71mmK7A888/b/M3j4e9h22kRYsWBQyzFOBeKKe6GKYsYPS4Ak888UTgxx9/DNx///12G8owH9nqZTOL8MUWaegWIe0lPzCgfu4tQiN9C5xxxhm2vQ0bNszaIqT94GiY0ayS2EZkay43MhK1ANtnpIf++eefgNHfCixcuNDixrarYfps3oZZDcyaNStbls4W4fLlyy0On332mU1DG2ijkchlbRGyZWgY6IBh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\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R -w 600 -h 300\n",
    "library(patchwork)\n",
    "raw <- ggplot(ind_part, aes(x=mean_aoa_estimation, y=participant_aoa_estimation, label=sense_question)) +geom_point(alpha=.75) +\n",
    "ylim(0,20) + xlim(0,20)+\n",
    "geom_smooth(method='lm', formula= y~x) + \n",
    "geom_abline(slope=1, intercept=0) + labs( x = \"Mean Tags For Calibration Across All Participants\", y='Participant Tags For Calibration',\n",
    "         title =paste(\"Participant\",slice(ind_part,1)$participant_id,\" vs Mean AoA\"),\n",
    "         subtitle=\"Before transformation\") + theme_light()\n",
    "\n",
    "adjusted <- ggplot(ind_part, aes(x=mean_aoa_estimation, y=div_coeff, label=sense_question)) +geom_point(alpha=.75) +\n",
    "ylim(0,20) + xlim(0,20)+\n",
    "geom_smooth(method='lm', formula= y~x) + \n",
    "geom_abline(slope=1, intercept=0) + labs( x = \"Mean Tags For Calibration Across All Participants\", y='Adjusted Participant Tags For Calibration',\n",
    "         \n",
    "         subtitle=\"After transformation (): (tag - intercept)/coeff\") + theme_light()\n",
    "\n",
    "raw+adjusted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>participant_id</th>\n",
       "      <th>sense_question</th>\n",
       "      <th>participant_aoa_estimation</th>\n",
       "      <th>question_group</th>\n",
       "      <th>mean_aoa_estimation</th>\n",
       "      <th>offset</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>0.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>2.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>-0.853546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>2.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>0.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>968</th>\n",
       "      <td>2189</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>2.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>2193</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>-1.853546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>2196</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>1.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>2215</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>0.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>2218</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>-0.853546</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>973 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    participant_id         sense_question  participant_aoa_estimation  \\\n",
       "0                2  cat calibration_say_1                         3.0   \n",
       "1                6  cat calibration_say_1                         5.0   \n",
       "2                7  cat calibration_say_1                         2.0   \n",
       "3                8  cat calibration_say_1                         5.0   \n",
       "4                9  cat calibration_say_1                         3.0   \n",
       "..             ...                    ...                         ...   \n",
       "968           2189  cat calibration_say_1                         5.0   \n",
       "969           2193  cat calibration_say_1                         1.0   \n",
       "970           2196  cat calibration_say_1                         4.0   \n",
       "971           2215  cat calibration_say_1                         3.0   \n",
       "972           2218  cat calibration_say_1                         2.0   \n",
       "\n",
       "    question_group  mean_aoa_estimation    offset  \n",
       "0              say             2.853546  0.146454  \n",
       "1              say             2.853546  2.146454  \n",
       "2              say             2.853546 -0.853546  \n",
       "3              say             2.853546  2.146454  \n",
       "4              say             2.853546  0.146454  \n",
       "..             ...                  ...       ...  \n",
       "968            say             2.853546  2.146454  \n",
       "969            say             2.853546 -1.853546  \n",
       "970            say             2.853546  1.146454  \n",
       "971            say             2.853546  0.146454  \n",
       "972            say             2.853546 -0.853546  \n",
       "\n",
       "[973 rows x 6 columns]"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_to_estimation_df[mean_to_estimation_df['sense_question']=='cat calibration_say_1']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept = -2.7181523699284584\n",
      "Coeff = 1.37827520558923\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "X = ind_part['mean_aoa_estimation'].values.reshape(-1,1)\n",
    "y = ind_part['participant_aoa_estimation'].values.reshape(-1,1)\n",
    "reg = LinearRegression()\n",
    "reg.fit(X, y)\n",
    "print(\"Intercept =\", reg.intercept_[0])\n",
    "print(\"Coeff =\",reg.coef_[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept = -2.7181523699284584\n",
      "Coeff = 1.37827520558923\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "X = ind_part['mean_aoa_estimation'].values.reshape(-1,1)\n",
    "y = ind_part['participant_aoa_estimation'].values.reshape(-1,1)\n",
    "reg = LinearRegression()\n",
    "reg.fit(X, y)\n",
    "print(\"Intercept =\", reg.intercept_[0])\n",
    "print(\"Coeff =\",reg.coef_[0][0])\n",
    "\n",
    "ind_part['sub_intercept'] = ind_part.participant_aoa_estimation.apply(lambda est: est - reg.intercept_[0])\n",
    "ind_part['div_coeff'] = ind_part.sub_intercept.apply(lambda est: est/reg.coef_[0][0])\n",
    "ind_part\n",
    "%R -i ind_part"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "ind_part['sub_intercept'] = ind_part.participant_aoa_estimation.apply(lambda est: est - reg.intercept_[0])\n",
    "ind_part['div_coeff'] = ind_part.sub_intercept.apply(lambda est: est/reg.coef_[0][0])\n",
    "ind_part\n",
    "%R -i ind_part"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%R\n",
    "ggplot(ind_part, aes(x=mean_aoa_estimation, y=div_coeff, label=sense_question)) +geom_point(alpha=.25) +\n",
    "ylim(0,20) + xlim(0,20)+\n",
    "geom_smooth(method='lm', formula= y~x) + \n",
    "geom_abline(slope=1, intercept=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x128354f50>"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ind_part['diff_mean'] = ind_part.mean_aoa_estimation - ind_part.div_coeff\n",
    "ind_part.diff_mean.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "%R -i mean_to_estimation_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear mixed model fit by REML ['lmerMod']\n",
      "Formula: participant_aoa_estimation ~ sense_question + (1 | participant_id)\n",
      "   Data: mean_to_estimation_df\n",
      "\n",
      "REML criterion at convergence: 90859.8\n",
      "\n",
      "Scaled residuals: \n",
      "    Min      1Q  Median      3Q     Max \n",
      "-4.1355 -0.5853 -0.0430  0.5814  9.1083 \n",
      "\n",
      "Random effects:\n",
      " Groups         Name        Variance Std.Dev.\n",
      " participant_id (Intercept) 3.025    1.739   \n",
      " Residual                   5.313    2.305   \n",
      "Number of obs: 19406, groups:  participant_id, 1618\n",
      "\n",
      "Fixed effects:\n",
      "                                               Estimate Std. Error t value\n",
      "(Intercept)                                     3.75591    0.09257  40.573\n",
      "sense_questionbedroom calibration_understand_1 -0.57839    0.14662  -3.945\n",
      "sense_questionblock calibration_say_1           5.61115    0.10453  53.677\n",
      "sense_questionblock calibration_understand_1    4.79913    0.14662  32.732\n",
      "sense_questioncandy calibration_say_1          -0.80140    0.10453  -7.666\n",
      "sense_questioncandy calibration_understand_1   -0.98572    0.14666  -6.721\n",
      "sense_questioncat calibration_say_1            -0.90236    0.10450  -8.635\n",
      "sense_questioncat calibration_understand_1     -0.94909    0.14662  -6.473\n",
      "sense_questiondrive calibration_say_1           6.20888    0.10453  59.395\n",
      "sense_questiondrive calibration_understand_1    5.76037    0.14662  39.288\n",
      "sense_questiongrandma calibration_say_1        -0.67249    0.10453  -6.433\n",
      "sense_questiongrandma calibration_understand_1 -0.80490    0.14662  -5.490\n",
      "sense_questionkeys calibration_say_1            5.04633    0.10453  48.274\n",
      "sense_questionkeys calibration_understand_1     4.48425    0.14662  30.585\n",
      "sense_questionleg calibration_say_1            -0.40223    0.10453  -3.848\n",
      "sense_questionleg calibration_understand_1     -0.54862    0.14662  -3.742\n",
      "sense_questionliving calibration_say_1          5.84469    0.10453  55.911\n",
      "sense_questionliving calibration_understand_1   5.14487    0.14662  35.090\n",
      "sense_questionpen calibration_say_1             6.41264    0.10450  61.364\n",
      "sense_questionpen calibration_understand_1      5.70549    0.14662  38.914\n",
      "sense_questionsheep calibration_say_1           6.65847    0.10453  63.696\n",
      "sense_questionsheep calibration_understand_1    5.88549    0.14662  40.142\n",
      "sense_questiontickle calibration_say_1         -0.45212    0.10453  -4.325\n",
      "sense_questiontickle calibration_understand_1  -0.70971    0.14662  -4.841\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: \n",
      "Correlation matrix not shown by default, as p = 24 > 12.\n",
      "Use print(object, correlation=TRUE)  or\n",
      "    vcov(object)        if you need it\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%%R\n",
    "library(lme4)\n",
    "\n",
    "aoa_pred = lmer(participant_aoa_estimation ~ sense_question + (1|participant_id), \n",
    "                data=mean_to_estimation_df)\n",
    "summary(aoa_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_to_estimation_df.to_csv('../data/aoa_calibration_estimations.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>participant_id</th>\n",
       "      <th>sense_question</th>\n",
       "      <th>participant_aoa_estimation</th>\n",
       "      <th>question_group</th>\n",
       "      <th>mean_aoa_estimation</th>\n",
       "      <th>offset</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>0.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>2.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>-0.853546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>2.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>0.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>968</th>\n",
       "      <td>2189</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>2.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>2193</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>-1.853546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>2196</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>1.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>2215</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>0.146454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>2218</td>\n",
       "      <td>cat calibration_say_1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>say</td>\n",
       "      <td>2.853546</td>\n",
       "      <td>-0.853546</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>973 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    participant_id         sense_question  participant_aoa_estimation  \\\n",
       "0                2  cat calibration_say_1                         3.0   \n",
       "1                6  cat calibration_say_1                         5.0   \n",
       "2                7  cat calibration_say_1                         2.0   \n",
       "3                8  cat calibration_say_1                         5.0   \n",
       "4                9  cat calibration_say_1                         3.0   \n",
       "..             ...                    ...                         ...   \n",
       "968           2189  cat calibration_say_1                         5.0   \n",
       "969           2193  cat calibration_say_1                         1.0   \n",
       "970           2196  cat calibration_say_1                         4.0   \n",
       "971           2215  cat calibration_say_1                         3.0   \n",
       "972           2218  cat calibration_say_1                         2.0   \n",
       "\n",
       "    question_group  mean_aoa_estimation    offset  \n",
       "0              say             2.853546  0.146454  \n",
       "1              say             2.853546  2.146454  \n",
       "2              say             2.853546 -0.853546  \n",
       "3              say             2.853546  2.146454  \n",
       "4              say             2.853546  0.146454  \n",
       "..             ...                  ...       ...  \n",
       "968            say             2.853546  2.146454  \n",
       "969            say             2.853546 -1.853546  \n",
       "970            say             2.853546  1.146454  \n",
       "971            say             2.853546  0.146454  \n",
       "972            say             2.853546 -0.853546  \n",
       "\n",
       "[973 rows x 6 columns]"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_to_estimation_df[mean_to_estimation_df['sense_question']=='cat calibration_say_1']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>num_item_id</th>\n",
       "      <th>definition</th>\n",
       "      <th>type</th>\n",
       "      <th>category</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>28</th>\n",
       "      <th>29</th>\n",
       "      <th>30</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>34</td>\n",
       "      <td>hen</td>\n",
       "      <td>word</td>\n",
       "      <td>animals</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.22</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.48</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>40</td>\n",
       "      <td>moose</td>\n",
       "      <td>word</td>\n",
       "      <td>animals</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>151</td>\n",
       "      <td>tuna</td>\n",
       "      <td>word</td>\n",
       "      <td>food_drink</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.18</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.36</td>\n",
       "      <td>0.43</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>152</td>\n",
       "      <td>vanilla</td>\n",
       "      <td>word</td>\n",
       "      <td>food_drink</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>172</td>\n",
       "      <td>scarf</td>\n",
       "      <td>word</td>\n",
       "      <td>clothing</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.35</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>675</th>\n",
       "      <td>676</td>\n",
       "      <td>because</td>\n",
       "      <td>word</td>\n",
       "      <td>connecting_words</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0.42</td>\n",
       "      <td>0.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>676</th>\n",
       "      <td>677</td>\n",
       "      <td>but</td>\n",
       "      <td>word</td>\n",
       "      <td>connecting_words</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>677</th>\n",
       "      <td>678</td>\n",
       "      <td>if</td>\n",
       "      <td>word</td>\n",
       "      <td>connecting_words</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>678</th>\n",
       "      <td>679</td>\n",
       "      <td>so</td>\n",
       "      <td>word</td>\n",
       "      <td>connecting_words</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>680</td>\n",
       "      <td>then</td>\n",
       "      <td>word</td>\n",
       "      <td>connecting_words</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>74 rows Ã— 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     num_item_id definition  type          category    16    17    18    19  \\\n",
       "33            34        hen  word           animals  0.01  0.01  0.03  0.06   \n",
       "39            40      moose  word           animals  0.03  0.05  0.07  0.11   \n",
       "150          151       tuna  word        food_drink  0.01  0.02  0.05  0.04   \n",
       "151          152    vanilla  word        food_drink  0.00  0.00  0.02  0.03   \n",
       "171          172      scarf  word          clothing  0.00  0.00  0.03  0.04   \n",
       "..           ...        ...   ...               ...   ...   ...   ...   ...   \n",
       "675          676    because  word  connecting_words  0.00  0.00  0.01  0.02   \n",
       "676          677        but  word  connecting_words  0.00  0.00  0.00  0.01   \n",
       "677          678         if  word  connecting_words  0.00  0.01  0.00  0.01   \n",
       "678          679         so  word  connecting_words  0.00  0.01  0.01  0.02   \n",
       "679          680       then  word  connecting_words  0.00  0.00  0.00  0.01   \n",
       "\n",
       "       20    21    22    23    24    25    26    27    28    29    30  \n",
       "33   0.08  0.13  0.16  0.19  0.22  0.25  0.30  0.26  0.48  0.33  0.46  \n",
       "39   0.09  0.11  0.21  0.23  0.28  0.28  0.34  0.36  0.52  0.42  0.48  \n",
       "150  0.06  0.10  0.19  0.17  0.18  0.26  0.31  0.36  0.43  0.34  0.43  \n",
       "151  0.05  0.05  0.08  0.10  0.12  0.19  0.19  0.30  0.35  0.35  0.45  \n",
       "171  0.07  0.09  0.13  0.12  0.15  0.17  0.21  0.21  0.35  0.33  0.42  \n",
       "..    ...   ...   ...   ...   ...   ...   ...   ...   ...   ...   ...  \n",
       "675  0.03  0.04  0.10  0.13  0.12  0.15  0.27  0.30  0.37  0.42  0.49  \n",
       "676  0.02  0.04  0.04  0.05  0.07  0.11  0.17  0.23  0.25  0.27  0.39  \n",
       "677  0.01  0.02  0.02  0.03  0.04  0.10  0.08  0.12  0.19  0.20  0.23  \n",
       "678  0.03  0.05  0.06  0.10  0.10  0.15  0.20  0.25  0.29  0.30  0.38  \n",
       "679  0.02  0.02  0.03  0.06  0.07  0.11  0.20  0.21  0.28  0.24  0.34  \n",
       "\n",
       "[74 rows x 19 columns]"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "aoa_data = pd.read_csv('../data/item_data.csv')\n",
    "aoa_data[aoa_data['30']<.5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[90m# A tibble: 797 x 11\u001b[39m\n",
      "   item_id definition language form  type  category lexical_category\n",
      "   \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m   \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m      \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m    \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m    \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m           \n",
      "\u001b[90m 1\u001b[39m item_1  baa baa    Englishâ€¦ WS    word  sounds   other           \n",
      "\u001b[90m 2\u001b[39m item_2  choo choo  Englishâ€¦ WS    word  sounds   other           \n",
      "\u001b[90m 3\u001b[39m item_3  cockadoodâ€¦ Englishâ€¦ WS    word  sounds   other           \n",
      "\u001b[90m 4\u001b[39m item_4  grrr       Englishâ€¦ WS    word  sounds   other           \n",
      "\u001b[90m 5\u001b[39m item_5  meow       Englishâ€¦ WS    word  sounds   other           \n",
      "\u001b[90m 6\u001b[39m item_6  moo        Englishâ€¦ WS    word  sounds   other           \n",
      "\u001b[90m 7\u001b[39m item_7  ouch       Englishâ€¦ WS    word  sounds   other           \n",
      "\u001b[90m 8\u001b[39m item_8  quack quaâ€¦ Englishâ€¦ WS    word  sounds   other           \n",
      "\u001b[90m 9\u001b[39m item_9  uh oh      Englishâ€¦ WS    word  sounds   other           \n",
      "\u001b[90m10\u001b[39m item_10 vroom      Englishâ€¦ WS    word  sounds   other           \n",
      "\u001b[90m# â€¦ with 787 more rows, and 4 more variables: lexical_class \u001b[3m\u001b[90m<chr>\u001b[90m\u001b[23m,\n",
      "#   uni_lemma \u001b[3m\u001b[90m<chr>\u001b[90m\u001b[23m, complexity_category \u001b[3m\u001b[90m<chr>\u001b[90m\u001b[23m, num_item_id \u001b[3m\u001b[90m<dbl>\u001b[90m\u001b[23m\u001b[39m\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_sense_survey[final_sense_survey['question_type']=='calibration'].groupby(by='sense_question').agg('mean').reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_estimations = final_sense_survey[final_sense_survey['question_type']=='sense_question']\n",
    "sense_metrics = test_estimations.groupby(by=['sense_question']).agg(['mean','median','var', 'std'])['aoa_estimation'].reset_index()\n",
    "sense_metrics = pd.merge(sense_metrics,\n",
    "         test_estimations.groupby(by=['sense_question'])['participant_id'].agg('nunique'),\n",
    "         left_on='sense_question',\n",
    "         right_on='sense_question',\n",
    "         how='left')\n",
    "\n",
    "sense_metrics = sense_metrics.rename(columns={'participant_id':'num_estimations' ,\n",
    "                                             'var':'varience'})\n",
    "sense_metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import string\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "def matchWordnetSynset(survey_sense, survey_question_dict=question_dict, verbose=False):\n",
    "    pos_map = {'adj':'a'}\n",
    "\n",
    "    match_pos = re.search('(?<=\\ ).*?(?=\\_)', survey_sense)\n",
    "    match_pos = str(match_pos.group()).strip()\n",
    "    if match_pos in pos_map.keys():\n",
    "        match_pos = pos_map[match_pos]\n",
    "    \n",
    "    match_sense_num = re.search('\\d+(\\.\\d+)?$', survey_sense)\n",
    "    match_sense_num = str(match_sense_num.group())\n",
    "    \n",
    "    match_definition = re.search('(?<=\\-).*?(?=\\( E)', survey_question_dict[survey_sense])\n",
    "    match_definition = str(match_definition.group()).strip()\n",
    "    match_definition = match_definition.strip(string.punctuation.replace('()', ''))\n",
    "\n",
    "    \n",
    "    match_gloss = survey_sense.split(\" \")[0]\n",
    "    match_lemma = lemmatizer.lemmatize(match_gloss)\n",
    "\n",
    "    wn_sense = str(match_lemma)+str(\".\")+str(match_pos)+str(\".\")+str(match_sense_num)\n",
    "    \n",
    "    if verbose:\n",
    "        print(wn_sense, match_definition)\n",
    "    try:\n",
    "        #if the definition is not found for the word + pos combo, something's fishy\n",
    "        if match_definition not in [synset.definition() for synset in wn.synsets(match_word, match_pos)]:\n",
    "            return 'no_definition_match'\n",
    "        else:\n",
    "            return wn.synset(wn_sense).name()\n",
    "            \n",
    "    #if wordnet can't even find a synset with that name, somethings very fishy\n",
    "    except:\n",
    "        return 'no_wn_sense'\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "string.punctuation.replace('()', '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sense_metrics['converted_sense'] = sense_metrics.sense_question.apply(matchWordnetSynset)\n",
    "sense_metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_understand_prev_data = pd.read_csv(\"../data/r_understand_data.csv\")\n",
    "r_understand_prev_data['qID'] = r_understand_prev_data.qID.apply(lambda question: question.replace('.', ' '))\n",
    "r_understand_prev_data = r_understand_prev_data.rename(columns={'qID':'sense_question'})\n",
    "r_understand_prev_data\n",
    "\n",
    "n_understand_prev_data = pd.read_csv(\"../data/n_understand_data.csv\")\n",
    "n_understand_prev_data['qID'] = n_understand_prev_data.qID.apply(lambda question: question.replace('.', ' '))\n",
    "n_understand_prev_data = n_understand_prev_data.rename(columns={'qID':'sense_question'})\n",
    "n_understand_prev_data\n",
    "\n",
    "rn_understand_data = pd.concat([n_understand_prev_data[['sense_question', 'word', 'wordnet_sense.no', 'definition', 'single_example']],\n",
    "                               r_understand_prev_data[['sense_question', 'word', 'wordnet_sense.no', 'definition', 'single_example']]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.merge(sense_metrics,\n",
    "        rn_understand_data,\n",
    "        left_on='sense_question',\n",
    "        right_on='sense_question',\n",
    "        how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_understand_prev_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sense_metrics[sense_metrics['converted_sense']=='no_definition_match']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sense_metrics[sense_metrics['num_estimations']<15]\n",
    "ind_part.groupby(by=['sense_question','question_group']).size().reset_index()\n",
    "sense_metrics =sense_metrics.drop(columns='question_group')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def questiontype(sense_question):\n",
    "    if 'say' in sense_question:\n",
    "        return 'say'\n",
    "    elif 'understand' in sense_question:\n",
    "        return 'understand'\n",
    "    else:\n",
    "        return 'calibration'\n",
    "    \n",
    "sense_metrics['question_type'] = sense_metrics.sense_question.apply(questiontype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sense_metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%R -i sense_metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%R -w 600 -h 400\n",
    "pal <- pnw_palette(\"Bay\",2, type = \"discrete\")\n",
    "color_scale <- scale_fill_manual(values=pal)\n",
    "sense_plot <- ggplot(sense_metrics) + theme_minimal() + color_scale\n",
    "\n",
    "num_estimations <- sense_plot + geom_histogram(aes(x = sense_metrics$num_estimations, fill = question_type), binwidth = 1,\n",
    "                            color='black',position='stack') + labs(title =\"Number of Estimations\", \n",
    "                                                                    x='Number of Estimations'\n",
    "                                                                   )\n",
    "\n",
    "mean_estimation <- sense_plot + geom_histogram(aes(x = sense_metrics$mean, fill = question_type), binwidth = 1,\n",
    "                                               color='black',position='stack') + labs(title =\"Mean AoA Estimations\",\n",
    "                                                                                      x='Mean Estimations') + theme(legend.position = \"none\") \n",
    "\n",
    "median_estimations <- sense_plot + geom_histogram(aes(x = sense_metrics$median, fill = question_type), binwidth = 1,\n",
    "                                                  color='black',position='stack') + labs(title =\"Median AoA Estimations\",\n",
    "                                                                                         x='Median Estimations') + theme(legend.position = \"none\") \n",
    "\n",
    "num_estimations / (mean_estimation + median_estimations)\n",
    "\n",
    "ggsave('figures/estimations_hist.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "matchWordnetSynset('beads n_say_1', verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_dict['after adj_say_1']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "[synset.definition() for synset in wn.synsets('beads', 'n')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "checkMatchingDefinition('bear.v.8',question_dict['bear v_understand_8'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "wn.synsets('bear', 'v')\n",
    "[synset.definition() for synset in wn.synsets('bear', 'v')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_dict['bear v_understand_8']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "question_dict['bear v_understand_10']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
